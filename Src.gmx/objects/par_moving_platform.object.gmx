<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_no_angle_change_platform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* X and Y differences between current and last position. */
relative_x = x;        
relative_y = y;
previous_x = x;
previous_y = y;
x_speed    = 0; //The Horizontal Speed.
y_speed    = 0; //The Vertical Speed.       
x_dcspeed  = 0; //Increases/Decreases the horizontal speed when changing direction, aka Oscillating.
y_dcspeed  = 0; //Increases/Decreases the vertical speed  when changing direction, aka Oscillating.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Calculate</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create Variables:
var i, previous_x, previous_y;
previous_x = x;
previous_y = y;

//Set Horizontal/Vertical Speed:
if(xspd &lt; x_dcspeed) {
   x_dcspeed -= 0.025
}else if(xspd &gt; x_dcspeed) {
   x_dcspeed += 0.025
} 
if(yspd &lt; y_dcspeed) {
   y_dcspeed -= 0.025
} else if(yspd &gt; y_dcspeed) {
   y_dcspeed += 0.025
}

x_speed +=  x_dcspeed;
y_speed += -y_dcspeed;

//Set the X/Y Position:
x = floor(relative_x+x_speed); 
y = floor(relative_y-y_speed); 

//Change the X/Y Position of the Player:
i = 0;
player_main = instance_place(x,y,par_character)

if player_main!=noone{
  if(player_main.Action != ActionDie){
       if((player_main.Ground == true &amp;&amp; player_main.Action != ActionDie) ){
           player_main.x += (x-previous_x);
           player_main.y  = ((y-sprite_yoffset)-platform_offset);
       };
       };
       }
/*
repeat(instance_number(par_character)){
       player_main = global.player_ins[i];
       if(instance_exists(player_main) == false &amp;&amp; player_main != noone){
          i+=1;
          continue;
       };
       if(player_main.Action != ActionDie){
       if((player_main.Ground == true &amp;&amp; player_main.Action != ActionDie) ){
           player_main.x += (x-previous_x);
           player_main.y  = ((y-sprite_yoffset)-platform_offset);
       };
       };
       i+=1;
};
*/

//line 34 backup: if((player_main.Ground == true &amp;&amp; player_main.Action != ActionDie) &amp;&amp; (player_main.platform_moving = id) ) 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
