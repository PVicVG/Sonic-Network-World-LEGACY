<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>par_collision_platform_no_angle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    ChainSize = sprite_get_height(ChainSprite); // Size of the Chain.
    AngleVal  = 270;
    AngleMov  = AngleVal;                       // How much the swing moves.
    _X        = x;                              // X used for chains.
    _Y        = y-(ChainSize*Chains);           // Y used for chains.
    AngleSpd  = 3;                              // How fast the platform swings.
    XPrevious = x;                              // Previous X position.
    XRelative = x;                              // Relative X Position.
    YRelative = y;                              // Relative Y Position.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swing &amp; Handle Character.
    var player_main, i, Var_Cos, Var_Sin, XPrevious;
    XPrevious = x;

//  Set Cos/Sin:
    Var_Cos = (cos(degtorad(AngleMov))*ChainSize);
    Var_Sin = (sin(degtorad(AngleMov))*ChainSize);

//  Set the X/Y Position:
    x = floor(XRelative+Var_Cos); 
    y = floor(YRelative-Var_Sin); 

//  Change the X/Y Position of the Player:
    i = 0;
    repeat(instance_number(par_character)){
           CharacterMain = par_character;
           if(instance_exists(CharacterMain) == false &amp;&amp; CharacterMain != noone){
              i+=1;
              continue;
           }
           if((CharacterMain.Ground == true &amp;&amp; CharacterMain.Action != ActionDie) &amp;&amp; (CharacterMain.OnSwing = id)){
               CharacterMain.x += (x-XPrevious);
               CharacterMain.y  = ((y-sprite_yoffset)-PlatformOffset);
           }
           i+=1;
    }




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swing Movement.
    var Temp;
    Temp = AngleMov+AngleSpd;
    AngleMov = scr_character_wrap_angle(Temp);

    if(AngleMov &gt; AngleVal){
       AngleSpd -= 0.051; 
    }
    if(AngleMov &lt; AngleVal){
       AngleSpd += 0.051; 
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Chains and platform.

    draw_sprite(ChainSpriteTop, 0, _X, _Y);
    XRelative = _X;
    YRelative = _Y;
    repeat(Chains-1){
           XRelative = XRelative+(cos(degtorad(AngleMov))*ChainSize);
           YRelative = YRelative-(sin(degtorad(AngleMov))*ChainSize);    
           draw_sprite(ChainSprite, 0, floor(XRelative), floor(YRelative));   
    }

// Draw Platform:
   draw_sprite(sprite_index, 0, floor(x), floor(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
