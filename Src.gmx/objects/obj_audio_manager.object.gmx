<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>par_controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init. Audio Data.
 // This Object handles most Audio related things, make sure to change this for your game!
    
 // Variables (do not edit this if unsure)
    ZoneBGM     =    "";
    SampleRate  = 41100;
    PitchChange =  true;
    PitchValue  =     0;
    RunStep     = false;
    alarm[0]    =     5; 
        
 // Zone Music:
    Test_Theme   = (bgm_test_zone);  
 
 // Bonus Stages:
    Gumball_Theme = (bgm_bonus_gumball);
 
 // Invincibility Themes:
    Invincibility_Normal    = (bgm_invincibility); // Default Invincibility Music.
    Invincibility_Transform =   (bgm_super_sonic); // Theme that plays when in Super form.
     
 // Jingles:
    Jingle_ActClear = (snd_scoring_theme);         // Theme that plays after you cleared a act.
    Jingle_Drowning = (bgm_drowning);              // Theme that plays when you're about to drown.
    Jingle_GameOver = (bgm_game_over);             // Theme that play when we game over.
    
 // Credits:
    Credits_Theme = (bgm_credits); 
    
 // Effects:
    DeadFade = false;                              // Slowly fades out the music after the character dies.
    BossFade = false;                              // Slowly fades out the music when a boss is active.   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Audio Volumes.

    global.MaxBGMV = global.BGMVolume;
    global.MaxSFXV = global.SFXVolume;
    RunStep        = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Loop Points.

    if(CheckSound(global.BGMID) == true &amp;&amp; (global.BGMLoopStart != -1 &amp;&amp; global.BGMLoopEnd != -1)){
       if(audio_sound_get_track_position(global.BGMID) &gt;= global.BGMLoopEnd-global.BGMLoopDelay){
          audio_sound_set_track_position(global.BGMID, global.BGMLoopStart);
       }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increase/Decrease Volumes.

    // Only run if allowed to:
       if(RunStep == true){

    // Lower the BGM to 0% when the Life Jingle is playing.
       if(CheckSound(snd_character_life) == true or CheckSound(Jingle_Drowning) == true or CheckSound(snd_object_emerald) == true or CheckSound(egg_billiejean) == true
       or CheckSound(bgm_knuckles_fight) == true){
          if(global.BGMVolume != 0){
             global.BGMVolume  = 0;
          }
          if(CheckSound(snd_character_life) == true){
             if(global.SFXVolume != 0){
                global.SFXVolume  = 0;
             }
          }
       }else{
          if(global.BGMVolume &lt; global.MaxBGMV){
             global.BGMVolume++
          }else{
             global.BGMVolume = global.MaxBGMV;
          }          
          if(global.SFXVolume != global.MaxSFXV){
             global.SFXVolume  = global.MaxSFXV;
          }
       }
    
    // Fade out/in Background Music:   
       if(global.BGMVolume = 0){
          audio_sound_gain(ZoneBGM, global.BGMVolume, 0);
          audio_sound_gain(Invincibility_Normal, global.BGMVolume, 0);
          audio_sound_gain(Invincibility_Transform, global.BGMVolume, 0);          
       }else{
          audio_sound_gain(ZoneBGM, global.BGMVolume, 1000);       
          audio_sound_gain(Invincibility_Normal, global.BGMVolume, 1000)
          audio_sound_gain(Invincibility_Transform, global.BGMVolume, 1000);           
       }
       
       
    // Fade out when the character is dead:
       if(DeadFade == 1){
          audio_sound_gain(ZoneBGM, 0, 2000);       
          audio_sound_gain(Invincibility_Normal, 0, 2000)
          audio_sound_gain(Invincibility_Transform, 0, 2000);  
          audio_sound_gain(bgm_knuckles_fight, 0, 2000);         
       }

       
       }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Invincibility Themes.

    // Only run if allowed to:
       if(RunStep == true){
       
    // Check if the Character is invincible:
       CharacterCheck = (par_character)
       
       if(instance_exists(CharacterCheck)){
       
          if(CharacterCheck.CharacterState = CharacterNormal &amp;&amp; CharacterCheck.Invincibility = 1.5){
             if(Invincibility_Normal != noone){
                if(CheckSound(Invincibility_Normal) == false){
                   if(ZoneBGM != ""){
                      StopSound(ZoneBGM);
                   }
                   LoopSound(Invincibility_Normal, global.BGMVolume, 1);
                }
             }
          }else{
                if(CheckSound(Invincibility_Normal) == true){
                   StopSound(Invincibility_Normal);
                   if(ZoneBGM != ""){
                      LoopSound(ZoneBGM, global.BGMVolume, 1);
                   }
                }
          }
          
       }   
    
    // Check if the Character transformed into it's Super or Hyper Form:
       
       CharacterCheck = (par_character)
       
       if(instance_exists(CharacterCheck)){
         
             if(CharacterCheck.CharacterState = CharacterSuper or CharacterCheck.CharacterState = CharacterHyper){
                if(Invincibility_Transform != noone){
                   if(Invincibility_Normal != noone){
                      if(CheckSound(Invincibility_Normal) == true){
                         StopSound(Invincibility_Normal);
                      }
                   }
                   if(CheckSound(Invincibility_Transform) == false){
                      if(ZoneBGM != ""){
                         StopSound(ZoneBGM)
                      }
                      LoopSound(Invincibility_Transform, global.BGMVolume, 1);
                   }
                }
             }else{
                   if(CheckSound(Invincibility_Transform) == true){
                      StopSound(Invincibility_Transform)
                      if(ZoneBGM != ""){
                         LoopSound(ZoneBGM, global.BGMVolume, 1);
                      }
                   }               
             }

                    
       }
       
       }       
       
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increase Speed/Pitch for Speedshoes.

    // Only run if allowed to:    
    if(RunStep == true &amp;&amp; PitchChange == true){
    
       CharacterCheck = (par_character)       
       if(instance_exists(CharacterCheck)){
          if(CharacterCheck.HasSpeedShoes == true &amp;&amp; CharacterCheck.SpeedShoeTimer &gt; 0){
             if(PitchValue!=.2){
                PitchValue+=.01
             }
             if(audio_sound_get_pitch(ZoneBGM) != 1.2){
                audio_sound_pitch(ZoneBGM, 1+PitchValue);    
             }
          }else{
             if(global.GameTime &lt; 540000 &amp;&amp; CharacterCheck.HasSpeedShoes == false){
                if(PitchValue!=0){
                   PitchValue-=.01
                }
                if(audio_sound_get_pitch(ZoneBGM) != 1){
                   audio_sound_pitch(ZoneBGM, 1+PitchValue);    
                }             
             }
          }
       }

    }    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increase the pitch of music when we're about to time over (Custom, not in the original games)

    // Only run if allowed to:    
       if(RunStep == true &amp;&amp; PitchChange == true){

       // Change the Patch once we reach 9 minutes on the timer.    
          if(global.GameTime &gt;= 540000){
             if(PitchValue!=.2){
                PitchValue+=.01
             }
             if(audio_sound_get_pitch(ZoneBGM) != 1.2){
                audio_sound_pitch(ZoneBGM, 1+PitchValue);    
             }
          }

       }       
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop Music.
     
 // Stop when the tally results appear:
    if(instance_exists(obj_scoring_results) == true){
       StopSound(ZoneBGM);
    }
    
 // Stop when game over;
    if(instance_exists(obj_game_over) == true){
       StopSound(ZoneBGM);
       StopSound(Jingle_Drowning);
    }
     
 // Stop when the drowning theme appear:
    if(CheckSound(Jingle_Drowning) == true){
       StopSound(ZoneBGM);
    }    
    

    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop all sounds.
    
    audio_stop_all();
    DeadFade = false;
    BossFade = false;
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_music()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start Credits Theme.
    ZoneSetTheme(rm_flicky_credits, Credits_Theme, 0, -1, -1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset.

    DeadFade = false;
    global.BGMVolume = global.MaxBGMV;
    global.SFXVolume = global.MaxSFXV;
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
