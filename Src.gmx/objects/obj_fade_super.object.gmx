<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>0</persistent>
  <parentName>par_fade</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

     image_alpha = 0;    
     TransitionComplete = false;
     Color              = c_red;
     ColorRed           = 0;
     ColorGreen         = 0;
     ColorBlue          = 0;
     Scale              = -15;
     State              = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Limit Colors.
    
    if(ColorRed &gt; 255){
       ColorRed = 255;
    }
    if(ColorRed &lt; 0){
       ColorRed = 0;
    }       
    if(ColorGreen &gt; 255){
       ColorGreen = 255;
    }
    if(ColorGreen &lt; 0){
       ColorGreen = 0;
    }      
    if(ColorBlue &gt; 255){
       ColorBlue = 255;
    }
    if(ColorBlue &lt; 0){
       ColorBlue = 0;
    }   
     
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Colors.

//  Red:
    if(ColorRed &lt; 255){
       ColorRed += 15;
    }

//  Green:
    if(ColorGreen &lt; 255 &amp;&amp; ColorRed &gt; 255/2.5){
       ColorGreen += 15;
    }
        
//  Red:
    if(ColorBlue &lt; 255 &amp;&amp; ColorGreen &gt; 255/2.5){
       ColorBlue += 15;
    }

//  End the transition:
    if(ColorBlue == 255 &amp;&amp; State == 1){
       if(image_alpha &lt; 1){
          image_alpha += 0.1;
       }else{
          State = 2;
       }
    }
    
    if(State = 2){
       if(image_alpha != 0){
          image_alpha -= 0.025;
       }else{
          instance_destroy();
       }
    }

    Scale += 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the Fade.

    if(State == 1){
    draw_set_alpha(1){
                   if(Color = c_black){
                      draw_set_blend_mode_ext(bm_inv_src_color, bm_inv_dest_color)
                   }else{
                      draw_set_blend_mode(bm_add)
                   }
                   draw_set_color(make_color_rgb(ColorRed, ColorGreen, ColorBlue))
                   draw_circle(Parent.x, Parent.y, 16+Scale, false)
                   draw_set_blend_mode(bm_normal)
                   draw_set_alpha(image_alpha)
    }
    draw_set_blend_mode(-1)
    draw_set_alpha(1)
    }else{
                   if(Color = c_black){
                      draw_set_blend_mode(bm_subtract)
                   }else{
                      draw_set_blend_mode(bm_add)
                   }  
                   
                   draw_set_color(make_color_rgb(ColorRed, ColorGreen, ColorBlue))
                   draw_set_alpha(image_alpha)
                   draw_circle(Parent.x, Parent.y, 16+Scale, false)                   
                   draw_set_blend_mode(-1)                    
    }
    draw_set_blend_mode(-1)
    draw_set_alpha(1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
