<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bridge_12_logs</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bridge Configuration.
 // By TPOT.

 // Bridge settings
    NumberOfLogs    = 12;
    MaxiumTension   = 12;
    sprite_index       = spr_aaz_bridge;
    LogSprite       = spr_aaz_bridge;
    Initializated   = false;
    
 // Bridge status variables
    BridgeWidth     = 0;
    BridgeMidWidth  = 0;
    
 // Bridge lists
    BridgeLogs                 = ds_list_create();
    BridgeTensions             = ds_list_create();
    BridgeTensionsInterpolated = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate all logs and destroy them.

 // Activate logs:
    instance_activate_object(par_bridge)
    
 // Destroy bride logs.
    for(CurrentLog=0; CurrentLog &lt; NumberOflogs; CurrentLog++){
        with(ds_list_find_value(BridgeLogs, CurrentLog)){
             instance_destroy();
        }
    }
    
 // Destroy lists.
    ds_list_destroy(BridgeLogs);
    ds_list_destroy(BridgeTensions);
    ds_list_destroy(BridgeTensionsInterpolated);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for initialization

    if(Initializated) 
        exit;
    
    // Create logs
    for(CurrentLog=0; CurrentLog &lt; NumberOfLogs; CurrentLog++){
        Log              = instance_create(x+(sprite_get_width(LogSprite)*CurrentLog), y, par_bridge);
        Log.ParentBridge = id;
        Log.LogId        = CurrentLog;
        Log.sprite_index = LogSprite;
        
        ds_list_add(BridgeLogs, Log);
        ds_list_add(BridgeTensions, 0);
        ds_list_add(BridgeTensionsInterpolated, 0);
    }
    
    // Calculate other stuff
    BridgeWidth    = sprite_get_width(LogSprite)*NumberOfLogs;
    BridgeMidWidth = BridgeWidth*0.5;
    
    // Done
    Initializated = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Main Code.

// ---- Variable declaration ---------------------------------------------------------------------------
    var CurrentLog, CurrentPlayer, PlayerCount, PlayerHandle, TensionPoint, LeftSide, LeftSideStep, Right, RightStep;
    var DistanceFromCenter, CurrentHeight;
    
// ---- Routine ----------------------------------------------------------------------------------------

    // Reset all logs Height
    for (CurrentLog = 0; CurrentLog &lt; NumberOfLogs; CurrentLog += 1)
        ds_list_replace(BridgeTensions, CurrentLog, 0);
    
    // If no player exists, there's nothing more here to do.
    if (!instance_exists(par_character)) exit;
    
    // If a player exists, find out if he's on the bridge right now.
    PlayerCount = instance_number(par_character);
    for(CurrentPlayer = 0; CurrentPlayer &lt; PlayerCount; CurrentPlayer += 1){
        // Get player's handle
        PlayerHandle = instance_find(par_character, CurrentPlayer);
        
        // Find out if he's suitable for the check
        if(PlayerHandle == noone || PlayerHandle.Ground == false ||
        collision_rectangle(x, y-2, x+BridgeWidth, y+MaxiumTension, PlayerHandle, true, true) == false) continue;
        
        // Calculate tension point and distance from center
        TensionPoint        = min(max(round((PlayerHandle.x-x)/sprite_get_width(LogSprite)), 0), NumberOfLogs-1);
        DistanceFromCenter  = MaxiumTension*(1-(abs(floor(PlayerHandle.x-x-BridgeMidWidth)/BridgeMidWidth)));
        
        // Calculate Steps for positioning the logs
        LeftSide            = 0;
        RightSide           = 180;
        LeftSideStep        = scr_safe_division(90, TensionPoint);
        RightSideStep       = scr_safe_division(90, NumberOfLogs-TensionPoint);
        
        // Calculate new Heights. First left side and then Right side
        for (CurrentLog=0; CurrentLog &lt;= TensionPoint; CurrentLog++){
            // Calculate this log's Height
            CurrentHeight = sin(degtorad(LeftSide))*DistanceFromCenter;
            if(CurrentHeight &gt; ds_list_find_value(BridgeTensions, CurrentLog))
                ds_list_replace(BridgeTensions, CurrentLog, CurrentHeight);
                
            // Next step on this side
            LeftSide += LeftSideStep
        }
        for(CurrentLog=NumberOfLogs-1; CurrentLog &gt; TensionPoint; CurrentLog--){
            // Calculate this log's Height
            CurrentHeight = sin(degtorad(RightSide))*DistanceFromCenter;
            if(CurrentHeight &gt; ds_list_find_value(BridgeTensions, CurrentLog))
                ds_list_replace(BridgeTensions, CurrentLog, CurrentHeight);
                
            // Next step on this side
            RightSide -= RightSideStep
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interpolate logs.
    for(CurrentLog = 0; CurrentLog &lt; NumberOfLogs; CurrentLog++;){
        ds_list_replace(BridgeTensionsInterpolated, CurrentLog, scr_interpolate_values(ds_list_find_value(BridgeTensionsInterpolated, CurrentLog), ds_list_find_value(BridgeTensions, CurrentLog), 0.2));
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
