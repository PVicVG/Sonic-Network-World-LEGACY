<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite689</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_test_breakwall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Set the Block Width/Height */
block_width  = floor(sprite_get_width(sprite_index)/2);
block_height = floor(sprite_get_height(sprite_index)/2);

xx=x-sprite_get_xoffset(sprite_index)+(sprite_get_width(sprite_index)/2)
yy=y-sprite_get_yoffset(sprite_index)+(sprite_get_height(sprite_index)/2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Platform Collapse code port from Sonic MAX Engine. (With Permission) */
 
timer = 1;
height = (ceil(sprite_height/block_height)*block_height);
blockheight2 = block_height-(height-sprite_height);
 
if(image_xscale == -1){
 for(i=block_width;i&lt;=abs(sprite_width);i+=block_width;)
 {
  for(i2=height-block_height;i2&gt;=0;i2-=block_height;)
  {            
 
  ins               = instance_create(x-abs(sprite_width)+i, (y-sprite_yoffset)+i2, par_collapsing_terrain_tiles);
  with(ins)
  {
 
    /* Get _x/_y Position: */  
   _x = abs(other.sprite_width)-other.i;
   _y = other.i2;
   _solid = true;
   _w = other.block_width;
   
   if(other.i2 == other.height-other.block_height)  
   {          
    _h = other.blockheight2;
   };
   else
   {
    _h = other.block_height;
   };
   
   sprite_index    = other.sprite_index;                        
   image_xscale    = other.image_xscale;
   
    /* Set Gravitation and Speed: */                                        
   _gravity         = 0;
   _speed           = 0;
   _gravity_active   = false;
   
    /* Get Mask Sprite: */    
   if(sprite_exists(other.mask_index))
   {
    mask = sprite_duplicate(other.mask_index)
   };
   else
   {
    mask = sprite_duplicate(other.sprite_index)
   }
 
   sprite_collision_mask(mask, true, 2, _x, _x+_w, _y, _y+_h, 0, 0);
   mask_index      = mask;
   }
   
   i3 = i+block_width;
                   
   ins.alarm[0]   = timer;
   timer         += 2;
   }
 }
 }
 else if(image_xscale == 1)
 {
  for(i=sprite_width-block_width;i&gt;=0;i-=block_width;)
  {
   for(i2=height-block_height;i2&gt;=0;i2-=block_height;)
   {            
   
   ins               = instance_create(x+i, (y-sprite_yoffset)+i2, par_collapsing_terrain_tiles);
   with(ins)
   {
   
    /* Get _x/_y Position: */  
    _x = other.i
    _y = other.i2;
    _solid = true;
    _w = other.block_width;
   
    if(other.i2 == other.height-other.block_height)
    {            
     _h = other.blockheight2;
    };
    else
    {
     _h = other.block_height;    
    };
 
    sprite_index    = other.sprite_index;                        
    image_xscale    = other.image_xscale;
   
    /* Set Gravitation and Speed: */        
    _gravity         = 0;
    _speed           = 0;
    _gravity_active   = false;
   
    /* Get Mask Sprite: */    
    if(sprite_exists(other.mask_index))
    {
     mask = sprite_duplicate(other.mask_index)
    };
    else
    {
     mask = sprite_duplicate(other.sprite_index)
    };
   
    sprite_collision_mask(mask, true, 2, _x, _y, _x+_w, _y+_h, 0, 0);
    mask_index      = mask;
    }
 
    i3             = (abs(sprite_width)-i)+block_width;
                   
    ins.alarm[0]   = timer;
    timer         += 2;
    };
  };
};
 
//Collapse Sound:
sound_stop(snd_sfx_collapse);
sound_play(snd_sfx_collapse);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
