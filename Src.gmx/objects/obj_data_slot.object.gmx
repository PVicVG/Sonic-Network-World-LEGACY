<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_data_slot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//-----Genaric Variables
game_is_completed = sprite_get_number(spr_data_zone);
slot             = 0;       //the slot number. (i.e. the first slot, second slot, etc). this MUST be defined in each slot's CREATION CODE inside rm_data_select
empty            = true;   //whether or not the save slot is blank/empty
char_main        = 1;      //for MAIN character select, on a new/blank file
char_cpu         = 2;      //for CPU character select, on a new/blank file

//---Variables that will be loaded:
slot_zone        = 0;     //this load the last stage/zone the player accessed
slot_icon        = 0;     //this loads the correct zone preview.
slot_lives       = 0;     //this will load how many lives the player had
slot_chaos       = 0;     //this will load how many chaos emeralds the player collected
save_char        = 0;     //this will load what character the players was playing as
slot_cpu         = 0;     //this will load what CPU character was following the player 

//---For drawing misc stuff
chaos_flash = 0;            //flashing white chaso emerald

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
scr_game_zones()


//---------------------------------------------------------------------------------------------------------------------------------------------------------------------

// we will set an alarm to load the data. in the object's creation code, the slot number is set.
//therefore, we have to wait until this slot number is assigned to load the data.
//that's why we set an alarm (to wait to load the data).
alarm[0] = 1;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Load the Data</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Time to load the saved, if there is any
scr_slot_load(slot);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Create Level Select Menu</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create the Level Select Menu:
ID = instance_create(x,y,obj_data_level_select);
ID.slot = slot;
ID.zones = zones_in_game;
    for(i=0; i&lt;zones_in_game+1; i+=1){
        if(i != 0){
           ID.ls_zone_name[i] = zone_name[i];
           ID.ls_zone_room[i] = zone_room[i];
           };
        };

//Set Variables:
global.save_slot      = slot;
global.save_char      = slot_char;
global.save_cpu       = slot_cpu;
global.save_lives     = slot_lives;              
global.save_chaos     = slot_chaos;     
global.chaos_emeralds = global.save_chaos;
global.player_lifes   = global.save_lives;
     
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Start a Brand New Save File</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    global.save_zone  = global.first_zone;
    global.save_lives = 3;
    global.save_chaos = 0;
    global.chaos_emeralds = global.save_chaos;
    global.save_slot  = slot;
    global.save_char  = char_main;
    global.save_cpu   = char_cpu;
    scr_slot_save(slot); //...start a new file
    room_goto(global.save_zone);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Delete The Save Data</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_data_selector.slot = slot //check if this slot is currently selected by the cursor
{


    if empty == false //if the slot isn't empty
    {
        if (file_exists("gmate_save"+string(slot)+".sav"))//if the save file exists (which it should)
        {
            file_delete("gmate_save"+string(slot)+".sav");     //delete the save data
            empty = true;                                      //set the slot to be empty again.
            audio_play_sound(snd_sfx_error,1,false);
            slot_icon = 0;
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw the Data</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw the slot
draw_set_color(c_white);
draw_self();

//draw the saved stage, lives, etc if slot is not empty
if(empty == false){

    //if not currently selected by the cursor, draw static
    draw_sprite(spr_data_static,chaos_flash,x+5,y)  //NOTE: it uses "chaos_flash" as the image_index, because it runs at the same speed
    
    //Draw the saved character...
        //if there is a no CPU character
        if (slot_cpu == 0){
        draw_sprite(spr_data_char,slot_char,x+32,y+80)
        };
        
        //if there 
        if (slot_cpu &gt; 0){
           draw_sprite(spr_data_char,slot_cpu,x+39,y+79)
           draw_sprite(spr_data_char,slot_char,x+25,y+81)
        };
    
    //draw the saved character's life-counter head
    draw_sprite(spr_data_lives,slot_char-1,x+29,y+140)

    //draw the saved number of lives
    draw_set_font(global.fnt_data); 
    draw_text(x+61, y+141, string(slot_lives));
    
    //draw the last stage you played
    var cursor; cursor = obj_data_selector;
    if (cursor.slot == slot &amp;&amp; cursor.moving == false) //if selected by cursor, (thus covering up the static)
    if(slot_icon != game_is_completed){
       draw_sprite(spr_data_zone,slot_icon-1,x+5,y)
    }else if(slot_icon == game_is_completed){
             draw_sprite(spr_data_zone,sprite_get_number(spr_data_zone)-1,x+5,y)
    };
    //lastly, draw the number of chaos emeralds you have (they flash white)
    if (chaos_flash) {draw_sprite_ext(spr_data_chaos,slot_chaos,x+45,y+100,1,1,0,c_gray,1)}     //draw emeralds, flashed white
    else {draw_sprite_ext(spr_data_chaos,slot_chaos,x+45,y+100,1,1,0,c_white,1)}                //draw emeralds, plain
    

}

//this allows the chaos emeralds to flash white
chaos_flash += 0.2
if (chaos_flash &gt; 1)
{
chaos_flash = 0
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Map S to the Delete Key</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if this slot is currently selected by the cursor, and slot is not empty, then create the delete object.
if(instance_exists(obj_data_delete) == false &amp;&amp; instance_exists(obj_data_level_select) == false){
 if (!empty &amp;&amp; obj_data_selector.slot = slot)
 {
 delete_menu = instance_create(x,y,obj_data_delete);
 delete_menu.slot = id;
 }
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="46">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Create Delete Menu</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if this slot is currently selected by the cursor, and slot is not empty, then create the delete object.
if(instance_exists(obj_data_delete) == false &amp;&amp; instance_exists(obj_data_level_select) == false){
 if (!empty &amp;&amp; obj_data_selector.slot = slot)
 {
 delete_menu = instance_create(x,y,obj_data_delete);
 delete_menu.slot = id;
 }
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Use Save Slot, (Load, Start New)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create character select menu if we are creating a new save file

//First check if this slot is not an completed game:
if(id.slot_icon != game_is_completed){

//null this event if you are deleting data or selecting an AI character
if (instance_exists(obj_data_delete) || instance_exists(obj_data_char) ) exit; 

//check if this slot is currently selected by the cursor
if (obj_data_selector.slot = slot){

    //if the save slot is empty, create a Character Select Menu
    if (empty)
    {
    char_menu = instance_create(x,y,obj_data_char);
    char_menu.slot = id; //this attaches the character menu to this slot number
    }
    
    if (!empty) //otherwise, if the slot is NOT blank, use the loaded data and resume the saved game
    {
    global.save_zone    = slot_zone;
    global.save_char    = slot_char;
    global.save_cpu     = slot_cpu;
    global.save_lives   = slot_lives;              
    global.save_chaos   = slot_chaos; 
    global.chaos_emeralds = global.save_chaos;     
    global.save_slot    = slot;
    global.player_lifes = global.save_lives;
    room_goto(slot_zone);
    }
}

}

//When you completed the game, show a level select menu instead!
if (instance_exists(obj_data_delete) || instance_exists(obj_data_char) ) exit; 
if(!empty &amp;&amp; id.slot_icon == game_is_completed){
   if(obj_data_selector.slot = slot){
      if(!instance_exists(obj_data_level_select)){
         event_user(2);
      };
   };
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
