<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_editor_noicon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>99999999</depth>
  <persistent>0</persistent>
  <parentName>obj_control</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This BG uses a Surface to get a nice little Distortion object.

//Only if we allow the usage of surfaces:
if (global.enable_surfaces == true){

//Capturing Variables:
bg_capture     = false;                   /* Flag used to check if we're capturing the Screen. */
screen_surface = surface_create(256,256); /* This is the surface that will hold the data. */

//Variables for the Distortion Wave:
angle_x           = 0;                    /* Angles X Value */
angle_y           = 0;                    /* Angles Y Value */

current_angle_x   = 0;                    /* Checks the Current X Value of the Angle */
current_angle_y   = 0;                    /* Checks the Current Y Value of the Angle */

angle_increment_x = degtorad(5);          /* How strong the Angle (X Val) gets increased */
angle_increment_y = degtorad(5);          /* How strong the Angle (Y Val) gets increased */

wave_pitch_x      = degtorad(1.4);        /* The Waves Pitch */ 
wave_offset_x     = 12;                   /* The Waves Offset */ 
wave_pitch_y      = degtorad(0.1);
wave_offset_y     = 8;

scaled            = (320+(wave_offset_x*8))/320; /* Dis. Scaling */
steps             = 4;                           /* Scaling Steps */

start_y           = 0;                           /* The Position to start the Distortion. */

};

//Variable to change the BG's Hue:
bg_hue = 100
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Set Stuff</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Only if we allow the usage of surfaces:
if (global.enable_surfaces == true){

/* This Checks if we lost the surface, also sets the angle and bg hue */
if(surface_exists(screen_surface) == false) {
   surface_create(256,256);
};

//Capture the Screen:
surface_set_target(screen_surface){
 bg_capture =  true;
 draw_clear_alpha(c_white,0);
 bg_capture = false;
};

//Draw Backgrounds that should get distorted:
draw_background_tiled_ext(bg_tz_bg_b,0,bg_hue*-0.4,1,1,c_white,abs(sin(global.handle_object_timer/600)));

//Reset the Surface:
surface_reset_target();

//Change the Angle and BG Hue Value:
current_angle_x += angle_increment_x;
current_angle_y += angle_increment_y;
};
bg_hue          += 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw BG's</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Color Changing BG:
draw_background_tiled_ext(bg_tz_bg_c,view_xview+bg_hue/9.2,view_yview+bg_hue,1,1,make_color_hsv(bg_hue,255,255),1);
draw_background_tiled(bg_tz_bg_a, view_xview[view_current] * 0.875, 0);

//Only if we allow the usage of surfaces:
if (global.enable_surfaces == true){

//Draw Distorted BG:
var wave_x, texture_y, texture_step;
 if (bg_capture == false){
  
 //Draw the Background as a Distorted Surface:
 texture_step = 1/view_hview;
 angle_x      = (current_angle_x) + wave_pitch_x*start_y;
 texture_y    = texture_step * start_y;

 //The Actual Drawing:
 draw_primitive_begin_texture(pr_trianglestrip, surface_get_texture(screen_surface));
  for (y=start_y; y&lt;=(view_hview+steps); y+=steps){
       wave_x    = view_xview + sin(angle_x)*wave_offset_x-wave_offset_x;

       draw_vertex_texture_color(wave_x,view_yview+y, 0, texture_y, c_white, 1);
       draw_vertex_texture_color(view_xview+view_wview+(wave_offset_x), view_yview+y, 1, texture_y, c_white, 1);

       angle_x   += wave_pitch_x*steps;
       angle_y   += wave_pitch_y*steps;

       texture_y += texture_step*steps;
      };
   draw_primitive_end();         
 };
 
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
