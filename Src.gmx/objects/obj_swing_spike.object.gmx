<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spike_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>par_hurt</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setup Platform:
chains            = 5; //How Many Chains?
chain_sprite      = spr_swing_platform_chain; //The main Chain Sprite.
chain_top_sprite  = spr_swing_platform_chain; //The toppest Chain Sprite.
platform_offset   = 10; //Default at 10. You might need to tweak this with every other platform that uses different sprites.

/* Init. Variables here. This is a port of the Swing platform from Sonic MAX. */
chain_size = sprite_get_height(chain_sprite);
angle_mov  = 270;
_x_        = x;
_y_        = y-(chain_size*chains);
angle_spd  = 3;
x_previous = x;
relative_x = x;
relative_y = y;
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create Variables:
var player_main, i, var_cos, var_sin, x_previous;
x_previous = x;

//Set dcos/dsin:
var_cos = (cos(degtorad(angle_mov))*chain_size);
var_sin = (sin(degtorad(angle_mov))*chain_size);

//Set the X/Y Position:
x = floor(relative_x+var_cos); 
y = floor(relative_y-var_sin); 

//Change the X/Y Position of the Player:
i = 0;
repeat(instance_number(par_player)){
       player_main = global.player_ins[i];
       if(instance_exists(player_main) == false &amp;&amp; player_main != noone){
          i+=1;
          continue;
       };
       if((player_main.ground == true &amp;&amp; player_main.action != ConActDead) &amp;&amp; (player_main.platform_swing = id)){
           player_main.x += (x-x_previous);
           player_main.y  = ((y-sprite_yoffset)-platform_offset);
       };
       i+=1;
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var temp;
temp = angle_mov+angle_spd;
angle_mov = scr_wrap_angle(temp);

//Check if VAR_A is more then VAL_A.
if(angle_mov &gt; 270){
   angle_spd -= 0.051; 
}; 

//Check if VAR_A is less then VAL_A.
if(angle_mov &lt; 270){
   angle_spd += 0.051; 
}; 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the Chain:
draw_sprite(chain_top_sprite, 0, _x_, _y_);
relative_x = _x_;
relative_y = _y_;
repeat(chains-1){
       relative_x = relative_x+(cos(degtorad(angle_mov))*chain_size);
       relative_y = relative_y-(sin(degtorad(angle_mov))*chain_size);    
       draw_sprite(chain_sprite, 0, floor(relative_x), floor(relative_y));   
};

//Draw Platform:
draw_sprite(sprite_index, 0, floor(x), floor(y));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
