<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_znt_test_collapse</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_collision_collapse</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init. Variables.
    TileOX     = 2;
    TileOY     = 5;
    TileWidth  = (sprite_width  div 16);
    TileHeight = (sprite_height div 16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Collapsing tiles.

    var TileOX, TileOY, TileWidth, TileHeight;
    var TileW, TileH;
    var Int;
        Int        = 0;
        TileOX     = 2;
        TileOY     = 5;
        TileWidth  = (sprite_width  div 16);
        TileHeight = (sprite_height div 16);

  // Create all collapsing pieces.
     for(TileH = 0; TileH &lt; TileHeight; TileH++){
         for(TileW = 0; TileW &lt; TileWidth; TileW++){
             with(instance_create(x+TileW*16, y+TileH*16, obj_zne_test_collapse_pieces)){
                  // Set Sprite properties:
                     image_speed = 0;
                     image_index = TileH*TileWidth+TileW;   
                     Int         = TileH*TileWidth+TileW;                      
                     mask_index  = spr_mask_collapse_piece;                
                  // Delay:
                     if(image_xscale &gt; 0){
                        alarm[0] = ((TileWidth-TileW)*other.TileOX)+(((TileHeight-TileH)-1)*other.TileOY)
                     }else{
                        alarm[0] = (TileW*other.TileOX)+(((TileHeight-TileH)-1)*other.TileOY);                     
                     }
             }
         }
     }

  // Sound:
     PlaySound(snd_object_crumble, global.SFXVolume, 1, 1);
               
  // Destroy.
     instance_destroy();

           

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
