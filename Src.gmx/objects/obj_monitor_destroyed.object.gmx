<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_monitor_destroyed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>par_controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
    IconPosition       =  0;
    IconMoveTimer      = 45;
    IconDisappearTimer = 30;
    IconRewarded       = -1;
    YSpeed             = 0;      
    Gravity            = 0.21875;
    Landed             = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Monitor Icon.

  // Move Up:
     if(IconMoveTimer != 0){
        IconPosition  -= 1;
        IconMoveTimer -= 1;
     }
  // Stop Movement:
     else if(IconMoveTimer == 0 &amp;&amp; IconDisappearTimer != 0) { 
             IconDisappearTimer -= 1;
     }
     
  // Do something (Reward us with Rings, Shields, etc)
     if(IconMoveTimer == 0 &amp;&amp; IconRewarded = -1){
        IconRewarded = 1;
        event_user(0);
     }     
     
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gravity.
    if(Landed == false){
       if(YSpeed &gt;= 0 &amp;&amp; place_meeting(x, y+1, par_collision_terrain)){
          YSpeed  = 0;
          Landed  = true;
          while(place_meeting(x, y, par_collision_terrain)){
                y--;
          }
       }else{
          YSpeed += Gravity;
       }
          y+= YSpeed;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Give us something.
    
    switch(IconID){
           case 0: { 
                PlaySound(snd_object_ring, global.SFXVolume, 1, 0) 
                global.Rings += 10
                break; 
           }
           
           case 1: { 
                PlaySound(snd_shield_get_bubble, global.SFXVolume, 1, 0) 
                   if(DestroyParent.ShieldChild != 0){
                      if(instance_exists(DestroyParent.ShieldChild)){
                         with(DestroyParent.ShieldChild){
                              instance_destroy();
                         }
                      }
                   }           
                   DestroyParent.Shield = ShieldBubble;
                   DestroyParent.ShieldUsable = true;        
                break; 
           }   
           
           case 2: { 
                PlaySound(snd_shield_get_flame, global.SFXVolume, 1, 0)              
                   if(DestroyParent.ShieldChild != 0){
                      if(instance_exists(DestroyParent.ShieldChild)){
                         with(DestroyParent.ShieldChild){
                              instance_destroy();
                         }
                      }
                   }             
                   DestroyParent.Shield = ShieldFlames;
                   DestroyParent.ShieldUsable = true;                                   
                break; 
           }
           
           case 3: { 
                PlaySound(snd_shield_get_electricity, global.SFXVolume, 1, 0) 
                   if(DestroyParent.ShieldChild != 0){
                      if(instance_exists(DestroyParent.ShieldChild)){
                          with(DestroyParent.ShieldChild){
                               instance_destroy();
                         }
                      }
                   }              
                   DestroyParent.Shield = ShieldElectricity;
                   DestroyParent.ShieldUsable = true;                  
                break; 
           }           
           
           case 4: {
                PlaySound(snd_character_life, global.MaxSFXV, 1, 1)
                global.Lives++
                break; 
           }   
           
           case 5: {
                   with(DestroyParent){
                       Invincibility = 1.5;
                       InvTimer      = 900;                                       
                   }                     
                break;                
           }              
           
           case 6: {
                with(DestroyParent){
                    HasSpeedShoes  = true;
                    SpeedShoeTimer = 900;                                       
                }                       
                break;                
           }                                                                   
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the Broken Monitor.
    draw_sprite(sprite_index, -1, x, y)
    
 // Draw Icon:
    if(IconDisappearTimer != 0){
       draw_sprite_ext(spr_monitor_icon, IconID, x, Y+IconPosition, 1, 1, 0, c_white, 1)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
