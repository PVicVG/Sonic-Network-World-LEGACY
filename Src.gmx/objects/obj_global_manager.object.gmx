<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>par_controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center Screen.
    window_center(); 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gamepad Input.
//  Note:
//  When input is given with your Gamepad, it actually simulates and hits keys of your Keyboard.

          if(global.Controller_Input_Found != -1){
          
          // Deadzone:
             gamepad_set_axis_deadzone(global.Controller_Input_Found, global.Controller_Deadzone);
                    
             if(gamepad_button_check(global.Controller_Input_Found, global.Controller_Up)){
                keyboard_check(global.Key_UP)
             }
             if(gamepad_button_check_pressed(global.Controller_Input_Found, global.Controller_Up)){
                keyboard_key_press(global.Key_UP)
             }          
             if(gamepad_button_check_released(global.Controller_Input_Found, global.Controller_Up)){
                keyboard_key_release(global.Key_UP)
             }     
                       
          // Down:
             if(gamepad_button_check(global.Controller_Input_Found, global.Controller_Down)){
                keyboard_check(global.Key_DOWN)
             }
             if(gamepad_button_check_pressed(global.Controller_Input_Found, global.Controller_Down)){
                keyboard_key_press(global.Key_DOWN)
             }          
             if(gamepad_button_check_released(global.Controller_Input_Found, global.Controller_Down)){
                keyboard_key_release(global.Key_DOWN)
             }    
                       
          // Left:
             if(gamepad_button_check(global.Controller_Input_Found, global.Controller_Left)){
                keyboard_check(global.Key_LEFT)
             }
             if(gamepad_button_check_pressed(global.Controller_Input_Found, global.Controller_Left)){
                keyboard_key_press(global.Key_LEFT)
             }          
             if(gamepad_button_check_released(global.Controller_Input_Found, global.Controller_Left)){
                keyboard_key_release(global.Key_LEFT)
             }    
                       
          // Right:
             if(gamepad_button_check(global.Controller_Input_Found, global.Controller_Right)){
                keyboard_check(global.Key_RIGHT)
             }
             if(gamepad_button_check_pressed(global.Controller_Input_Found, global.Controller_Right)){
                keyboard_key_press(global.Key_RIGHT)
             }          
             if(gamepad_button_check_released(global.Controller_Input_Found, global.Controller_Right)){
                keyboard_key_release(global.Key_RIGHT)
             }              
          
          // Action:
             if(gamepad_button_check(global.Controller_Input_Found, global.Controller_Action)){
                keyboard_check(global.Key_ACTION)
             }
             if(gamepad_button_check_pressed(global.Controller_Input_Found, global.Controller_Action)){
                keyboard_key_press(global.Key_ACTION)
             }          
             if(gamepad_button_check_released(global.Controller_Input_Found, global.Controller_Action)){
                keyboard_key_release(global.Key_ACTION)
             }                    
             
          // Special:
             if(gamepad_button_check(global.Controller_Input_Found, global.Controller_Special)){
                keyboard_check(global.Key_SPECIAL)
             }
             if(gamepad_button_check_pressed(global.Controller_Input_Found, global.Controller_Special)){
                keyboard_key_press(global.Key_SPECIAL)
             }          
             if(gamepad_button_check_released(global.Controller_Input_Found, global.Controller_Special)){
                keyboard_key_release(global.Key_SPECIAL)
             }      
                        
          // Enter/Pause:
             if(gamepad_button_check(global.Controller_Input_Found, global.Controller_Enter)){
                keyboard_check(global.Key_ENTER)
             }
             if(gamepad_button_check_pressed(global.Controller_Input_Found, global.Controller_Enter)){
                keyboard_key_press(global.Key_ENTER)
             }          
             if(gamepad_button_check_released(global.Controller_Input_Found, global.Controller_Enter)){
                keyboard_key_release(global.Key_ENTER)
             }  
             
       }

       
       

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the application name.
    if !instance_exists(pGlobalPlayer){
    if(window_get_caption() != GameTitle){
            window_set_caption(GameTitle);
    }}else{
   
            window_set_caption((string(GameTitle)+" | VERSION:"+string(GameVersion)+" | PING:"+string(gms_info_ping())+" | FPS:"+string(fps)));
    }
    

    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change the Screen size.
    if(keyboard_check_pressed(vk_f4) == true){
    
       // Increase the Screen size variable:
          if(global.ScreenSize &lt; 4){
             global.ScreenSize++
          }else{
             global.ScreenSize = 1;
          }
          
       // Modify the Screen size:
          switch(global.ScreenSize){
                 case 1:{ window_set_size(global.ScreenWidth,   global.ScreenHeight);   window_set_fullscreen(0); alarm[0] = 1; break }
                 case 2:{ window_set_size(global.ScreenWidth*2, global.ScreenHeight*2); alarm[0] = 1; break }
                 case 3:{ window_set_size(global.ScreenWidth*3, global.ScreenHeight*3); alarm[0] = 1; break }          
                 case 4:{ window_set_size(global.ScreenWidth,   global.ScreenHeight);   alarm[0] = 1; window_set_fullscreen(1); break }                           
          }
       
    }

    if(keyboard_check_pressed(vk_escape) == true){
       game_end()
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart Game.
    if(keyboard_check_pressed(vk_f2) == true){
       game_restart();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
