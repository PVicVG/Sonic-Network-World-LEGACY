<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPauseIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999997</depth>
  <persistent>0</persistent>
  <parentName>par_controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create parts of the Level.

    // Camera:
       instance_create(0, 0, obj_camera);       
      
    // Titel Card:
       instance_create(0, 0, obj_title_card_controller);

    // Character specific:
       CharID   = 0;
       alarm[0] = 5;
    
    // Cheat Input
       CheatCode    = "";
       CheatTime    = 30;
       KonamiCode   = 0;
       KonamiLoaded = noone;
       KonamiSprite = noone;

    // Reset Values:
       if(global.BonusStage = false){
          global.Rings        = 0;
          global.Time         = 0;
          global.GameTime     = 0;
          global.game_time = 0;
          global.handle_object_timer = 0;
          global.DoTime       = 0;       
          global.ObjectTime   = 0;
          global.CharControl  = 0;
          if(global.Ring100Check_Deactivate == false){
             global.Ring100Check = 1;
          }
          FrameRate           = 60;
          obj_audio_manager.DeadFade = false;
       }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause screen variables.
    GamePaused = false;
    GamePBG    = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character specific variables.
    CharID = par_character.CharacterID - 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// (Un)Pause Game.

    if gms_chat_istyping(){exit;}
    if(global.DoTime == true &amp;&amp; instance_exists(par_fade) == false &amp;&amp; !instance_exists(obj_game_over)){
    var pause_key;
    pause_key = vk_escape
       // Check if we pressed Pause:
          if(keyboard_check_pressed(pause_key)){
           
            event_user(0)
             
          }
    
    } 


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy instances outside the view.

    // We don't need any of this in a Bonus Stage:
    // So only run it when we're in an actual stage.
       if(global.BonusStage == false &amp;&amp; GamePaused == false){
    
    // Deactivate all objects:
       instance_deactivate_all(true);
       
    // Activate instances:
       instance_activate_object(par_controller);
        
    // Activate instances inside the view:
       for(i=0; i&lt;8; i+= 1){
           if(view_visible[i] == false){
              break;
           }
              instance_activate_region(view_xview[i] - 80, view_yview[i] - 80, view_wview[i] + 80, view_hview[i] + 80, true)
       }
    
    // Activate instances in a specific region while the character is moving fast.
       if(instance_exists(par_character)){
          for(i=0; i&lt;instance_number(par_character); i+=1){
              var _Ext, _Pl;
                  _Pl  = instance_find(par_character, i);
                  _Ext = max(abs(_Pl.XSpeed) * 3, abs(_Pl.YSpeed) * 3)
                         instance_activate_region((_Pl.x - view_wview[0] div 2) + min(-_Ext, 0),
                                                  (_Pl.y - view_hview[0] div 2) + min(-_Ext, 0), 
                                                  (view_wview[0]) + max(_Ext, 0),
                                                  (view_hview[0]) + max(_Ext, 0),
                                                  true);                
          }
       } 
    
    // Special case, when instances HAVE to be loaded:
       instance_activate_object(par_bridge);
       instance_activate_object(par_collision_pushable);
       instance_activate_object(obj_sth3_switch);
       instance_activate_object(par_collision_swing);
       instance_activate_object(par_collision_collapse);
       instance_activate_object(par_collision_collapse_tiles); 
       instance_activate_object(par_collision_moving);    
        
       }
       


    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Global Timers.

    if(global.BonusStage == false &amp;&amp; GamePaused == false){
       if(global.DoTime &gt; 0){
          if(global.GameTime &lt; 599999){
             global.GameTime   += 1000/60;
          }else{
             global.GameTime = 599999
             if(instance_exists(par_character)){
                with(par_character){
                     Action = ActionDie;
                }
             }
          }
       }
    }
    
    if(GamePaused == false){
       global.ObjectTime += 1000/60;
       global.game_time = global.GameTime;
       global.handle_object_timer = global.ObjectTime;
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Infinite Lives!

if global.Lives!=3{
global.Lives=3
}


/*

/// Gain a life with 100 rings.

    if(global.Ring100Check &lt; 100){
    
       if(global.Rings &gt;= (global.Ring100Check * 100)){
       
          // Gain a life:
             global.Ring100Check++
             global.Lives++   
          
          // Play life jingle:
             PlaySound(snd_character_life, global.MaxSFXV, 1, 1)
       }
       
       // If we get hit and we no longer have any rings, set the check back to 1:
          if(global.Rings = 0 &amp;&amp; global.Ring100Check != 1){
             global.Ring100Check = 1;
          }
          
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cheat Input.

    if(global.Cheats == 1){
    
       // Get key presses:
          if(keyboard_check_pressed(vk_anykey)){
             switch(keyboard_key){
                    case vk_up:{
                         CheatCode += ".UP";                       
                         break;
                    }
                    case vk_down:{
                         CheatCode += ".DOWN";                       
                         break;
                    }               
                    case vk_right:{
                         CheatCode += ".RIGHT";                       
                         break;
                    }
                    case vk_left:{
                         CheatCode += ".LEFT";                        
                         break;
                    }   
                    case global.Key_ACTION:{
                         CheatCode += ".ACTION";                        
                         break;
                    }  
                    case global.Key_SPECIAL:{
                         CheatCode += ".SPECIAL";                       
                         break;
                    }                                                                
             }

             if(CheatTime != 30){
                CheatTime  = 30;
             }
             
          }
          
       // Decrease timer to reset code:
          if(CheatCode != ""){
             if(CheatTime != 0){
                CheatTime --
             }else{
                CheatCode = "";
                CheatTime = 30;
             }
          }   
          
       // Cheats:

          // Debug:       
          if(instance_exists(par_character)){
          
          // Debug:
             if(CheatCode = ".UP.UP.DOWN.DOWN.UP.UP.UP.UP"){
                CheatCode = "";
                CheatTime = 30;
                PlaySound(snd_object_ring, global.SFXVolume, 1, 1);
             }               

          // 50 Rings:       
             if(CheatCode = ".DOWN.DOWN.UP.UP.DOWN.DOWN.DOWN.DOWN"){
                CheatCode     = "";
                CheatTime     = 30;
                global.Rings += 50;
                PlaySound(snd_object_ring, global.SFXVolume, 1, 1);
             }    
             
          // Switch Characters:
             if(CheatCode = ".UP.DOWN.RIGHT.LEFT.ACTION" &amp;&amp; par_character.XSpeed = 0){
                CheatCode     = "";
                CheatTime     = 30;
                with(par_character){
                     if(CharacterID &lt; 4){
                        CharacterID++
                     }else{
                        CharacterID = 1;
                     }
                }
                PlaySound(snd_object_ring, global.SFXVolume, 1, 1);
             }   
              
          // Konami Code:
             if(CheatCode = ".UP.UP.DOWN.DOWN.LEFT.RIGHT.LEFT.RIGHT.SPECIAL.ACTION"){
                CheatCode  = "";
                CheatTime  = 30;
                KonamiCode = 1;
                PlaySound(snd_object_ring, global.SFXVolume, 1, 1);
             }   
                  
          }
    
    }
    
    
    /*


   if(Cheat_Code != ""){
      if(Cheat_Timer != 0){
         Cheat_Timer--
      }else{
         Cheat_Code  = "";
         Cheat_Timer = 15;
      }
   }
   
   if(Cheat_Code = ".RIGHT.RIGHT.LEFT.UP.RIGHT"){
      Cheat_Code = ""
      show_message("Nice")
   }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Konami Code - Easter Egg
    if(KonamiCode == 1){
       KonamiCode          = 0;
       KonamiLoaded        = sprite_add("https://i.imgur.com/qMg3vNB.png", 29, false, true, 0, 0);
       global.CharControl  = 0;
    }
    
 // Delete:
    if(KonamiSprite != noone &amp;&amp; CheckSound(egg_billiejean) == false){
       KonamiSprite = noone;    
       sprite_delete(KonamiLoaded);
    }
    
 // Stop.
    if(KonamiSprite != noone &amp;&amp; CheckSound(egg_billiejean) == true){    
       if(keyboard_check_pressed(global.Key_ACTION)){
          StopSound(egg_billiejean);
       }
    }
           
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Position
x = view_xview+477;
y = view_yview+3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if gms_chat_istyping(){exit;}
    if(global.DoTime == true &amp;&amp; instance_exists(par_fade) == false &amp;&amp; !instance_exists(obj_game_over)){
    event_user(0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Easter Egg.

   if(ds_map_find_value(async_load, "id") == KonamiLoaded){
      if(ds_map_find_value(async_load, "status") &gt;= 0 &amp;&amp; KonamiSprite == noone){
         PlaySound(egg_billiejean, global.BGMVolume, 1, 1);      
         KonamiSprite = KonamiLoaded;
         global.Lives = 30;
      }
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> // Pause the Game:   
                if(GamePaused == false &amp;&amp; GamePBG == noone &amp;&amp; instance_exists(obj_pause_menu) == false){
                   GamePaused = true;
                  
                   GamePBG    = background_create_from_surface(application_surface, 0, 0, global.ScreenWidth, global.ScreenHeight, 0, 0);
                   instance_deactivate_all(1);
                   audio_pause_all();                   
                   if(global.BonusStage == false){
                      instance_create(0, 0, obj_pause_menu);
                      instance_activate_object(obj_pause_menu)
                   }
                   instance_activate_object(obj_global_manager)                  
                   exit;
                }
                
             // Unpause the Game:
                if(GamePaused == true &amp;&amp; GamePBG != noone){
                      
                   background_delete(GamePBG);
                   GamePaused = false;
                   GamePBG    = noone;
                   instance_activate_all();
                   audio_resume_all();  
                   if(instance_exists(obj_pause_menu)){
                      with(obj_pause_menu){
                           Finished = true;
                      }
                   }
                   exit;                 
                }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Pause frame.
    if(GamePBG != noone){
       draw_background(GamePBG, view_xview, view_yview);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the Hud.

    // Exit when the game is paused:
    if(GamePaused == true) exit;
    
    
    draw_sprite(spr_online_checker,gms_info_isconnected(),view_xview[view_current]+0,view_yview[view_current]+0)
    
    // Don't draw if in Bonus Stages:
    if(global.BonusStage == false){
       
    
    // SCORE/TIME/RINGS:
       draw_sprite(spr_main_hud, 0, view_xview[view_current]+floor(16), view_yview[view_current]+floor(9));
       if( ((global.GameTime div 8) mod 2 &amp;&amp; global.GameTime &gt; 540000) or global.GameTime &lt; 540000 or global.DoTime = 0){       
       draw_sprite(spr_main_hud, 1, view_xview[view_current]+floor(16), view_yview[view_current]+floor(25));
       }
       if(((global.Rings == 0) &amp;&amp; (global.GameTime div 8) mod 2 ) or global.Rings &gt; 0 or instance_exists(obj_scoring_results) || global.DoTime == 0){
          draw_sprite(spr_main_hud, 2, view_xview[view_current]+floor(16), view_yview[view_current]+floor(41));
       }

    // Text for SCORE/TIME/RINGS:
       draw_set_font(global.Font_HUD){
                     draw_set_color(c_white){
                                    draw_set_halign(fa_right);
                                    draw_text(view_xview[view_current]+111, view_yview[view_current]+9, global.Score);                                                          
                                    draw_set_halign(fa_left);
                                    if( ((global.GameTime div 8) mod 2 &amp;&amp; global.GameTime &gt; 540000) or global.GameTime &lt; 540000 or global.DoTime = 0){      
                                    draw_text(view_xview[view_current]+55, view_yview[view_current]+25, 
                                              string(floor(global.GameTime/60000))+" "+scr_string_number_format(floor(global.GameTime/1000) mod 60,2));
                                    }          
                                    draw_set_halign(fa_right);
                                    draw_text(view_xview[view_current]+87, view_yview[view_current]+41, global.Rings);
                                    draw_set_halign(-1);
                     }
       } 
       
       draw_sprite(sprNetworkTokenDisplay, -1, view_xview+417, view_yview+5)
draw_text(view_xview+455, view_yview+11,string(global.network_tokens))
draw_sprite(sprPauseIcon, -1, view_xview+477, view_yview+3)

       
           var live;
           live = false;
           if live == true{
    // Lives:
       draw_set_font(global.Font_Life) {    
                     draw_set_halign(fa_right){
                                     //draw_text(view_xview[0]+64, view_yview[0]+view_hview[0]-15, global.Lives);                     
                                     //draw_sprite(spr_life_hud, CharID, view_xview[view_current]+floor(16), view_yview[view_current]+floor(200));  
                     }
                     draw_set_halign(-1)  
       }
       }

      }else{ // Draw the Ring counter in Bonus Stages.
          draw_sprite(spr_main_hud, 2, view_xview[view_current]+floor(16), view_yview[view_current]+floor(9)); 
          draw_set_font(global.Font_HUD){
             draw_set_color(c_white){
                draw_set_halign(fa_right);          
                draw_text(view_xview[view_current]+88, view_yview[view_current]+9, global.Rings);    
                draw_set_halign(-1);                
             }
          }
      }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Konami Easter Egg.
    if(KonamiSprite != noone){
       draw_set_color(c_black)
       draw_rectangle(view_xview, view_yview, view_xview+view_wview, view_yview+view_hview, false)
       draw_set_color(c_white)
       draw_sprite_ext(KonamiSprite, current_time div 60, view_xview+0, view_yview+0, 2, 2, 0, c_white, 1)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
