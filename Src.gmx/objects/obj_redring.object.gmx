<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_redring</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ring</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Normal:
collected = false;          // Is it collected?
attracted = false;          // Is it getting attracted?

//Motion Variables:
motion  =   false;          // Is the ring in movement?
speedX  =   0;              // X and Y speeds of the ring
speedY  =   0;              
gravityForce = 0.2;         // Ring Gravity

//Misc Variables:
timer   =   0;              // For making the rings disappear
flash   =   true;           // For the flashing effectï¿½
    
//Player Variables:    
distance_to_player = 0;
angle_to_player    = 0;
shield = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if (collected) 
    {
    scr_dummy_effect(spr_redring_sparkle,0.6,x,y,1);
    };
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Image Speed</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    /* The ring motion itself is fairly easy and shouldn't be any kind of
       problem. Move the ring, then if it was stuck, bounce and go to the
       previous x. The same for the Y movement.

       Also, there's a timer witch when it goes to 0, destroys the ring.
       (only if it's in motion)
    */

    // ---- Get attracted by player --------------------
    
    // Check if rings should be attracted    
    if (par_player != noone)
    {
        if (shield == 3)
        {
            distance_to_player = distance_to_object(par_player);
            if (distance_to_player &lt; 80) attracted = true;
        }
        else attracted = false;
    }
    
    // If so, go towards the player
    if ( attracted == true ) 
    {        
        angle_to_player = degtorad(point_direction(x, y, par_player.x, par_player.y));
        
        speedX = min(10, max(-10, speedX+cos(angle_to_player)*0.4));
        speedY = min(10, max(-10, speedY-sin(angle_to_player)*0.4));
    }

    // ---- Move if it is in motion --------------------

    // Apply X motion
    x += speedX + cos(angle_to_player)*attracted;

    if ( motion == true )
    {

        // Unstuck and bounce if it collides with the walls
        mask_index = maskRing_2;
        if ( (speedX &gt; 0 &amp;&amp; place_meeting( x + 6, y, par_terrain )) ||
             (speedX &lt; 0 &amp;&amp; place_meeting( x - 6, y, par_terrain )) )
        {
            // Unstick from the wall
            x -= speedX;            
            // Bounce, losening strenght
            speedX = -speedX * 0.9;
        }
    }

    // Apply Y motion
    y += speedY - sin(angle_to_player)*attracted;
    
    if ( motion == true )
    {        
        // Unstuck and bounce if it collides with the walls
        mask_index = maskRing;
        if ( (speedY &gt; 0 &amp;&amp; place_meeting( x, y + 6, par_terrain )) ||
             (speedY &lt; 0 &amp;&amp; place_meeting( x, y - 6, par_terrain )) )
        {
            // Unstick from the wall
            y -= speedY;            
            // Bounce, losening strenght
            speedY = -speedY * 0.9;
        }
                
        // Apply gravity force
        speedY += gravityForce;
        
        if ( timer &gt; 0  ) timer -= 1;
        if ( timer == 0 ) instance_destroy ();
    }

    // Destroy when Spilled
    if(motion &amp;&amp; (x &lt; view_xview || x &gt; view_xview+view_wview)) { 
       instance_destroy(); 
    }
        
    //Draw Animation
 image_index = global.handle_object_timer div 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw Ring</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    // Check if the ring is in movement and the timer is less than 90     
    if ( motion == true &amp;&amp; timer &lt; 90 )
    {
        // Here we'll just going to do a little trick. We need to check
        // if the rings needs to be drawn every X time. Since each frame
        // should be blinking us, we divide the timer between 2 to make the
        // timer stay longer in a number (dirty trick #1) and then calculate
        // the modulus (the remainder) for checking if it's pair or not.
        //
        // If it is, just draw the sprite
        if ( (timer div 4) mod 2 ) draw_sprite ( spr_redring, floor(image_index), x, y );
    } 
    else 
    {
        // Otherwise, draw normally
        draw_sprite ( spr_redring, floor(image_index), x, y );
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
