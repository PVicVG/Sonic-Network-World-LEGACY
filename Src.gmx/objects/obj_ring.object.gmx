<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ring</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>par_controller</parentName>
  <maskName>spr_ring_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    // Default:
       IsCollected    = false; // Whether or not we collected this ring.
       IsAttracted    = false; // Whether or not this ring is getting attracted to us.
       
    // Motion:
       InMotion       = false; // Whether or not this ring is in motion.
       GravityForce   = 0.2;   // Gravity of this ring.
       XSpeed         = 0;     // X Speed of this ring.
       YSpeed         = 0;     // Y Speed of this ring.
       
    // Misc. Variables: 
       RingTimer      = 0;     // Used to make the ring disappear.
       RingFlash      = 1;     // Used for the flashing effect.
       
    // Character variables:
       DistanceToChar = 0;     // Distance to the character.
       AngleToChar    = 0;     // Angle to the character.
       
    // Disable this:
       image_speed    = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create sparkle (if collected)
    if(IsCollected){
       scr_create_dummy_effect(spr_ring_sparkle, 0.4, x, y, 1, 0);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation Speed.
   if(InMotion == 0){
      image_index = global.ObjectTime div 120;
   }
   
   if(InMotion == 1 &amp;&amp; RingTimer &gt; 120){
      image_index = global.ObjectTime div 80;
   }
      
   if(InMotion &amp;&amp; RingTimer &lt; 120){   
      image_index = global.ObjectTime div 200;   
   }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement.

    // Get Attracted to the rings:
       Char = instance_nearest(x, y, par_character);
       if(Char){
          if(Char.Shield == ShieldElectricity){
             DistanceToChar = distance_to_object(Char);
             if(DistanceToChar &lt; 80){
                IsAttracted = 1;
             }
          }else{
                IsAttracted = 0;
          }
          
             // While Attracted, move towards the character:
                if(IsAttracted == 1){
                   AngleToChar = degtorad(point_direction(x, y, Char.x, Char.y));
                   XSpeed      = min(8, max(-8, XSpeed+cos(AngleToChar)*0.5));
                   YSpeed      = min(8, max(-8, YSpeed-sin(AngleToChar)*0.5));                                      
                }
                      
       }

    // Move if the ring is in motion:
       
       // Apply X Force:
          x += XSpeed + cos(AngleToChar)*IsAttracted;
          
          if(InMotion == true){
          
             // Set Mask:
                mask_index = spr_ring_mask_ver;
             
             // Unstuck and bounce when we collide with walls:
                if(XSpeed &gt; 0 &amp;&amp; place_meeting(x + 6, y, par_collision_solid))     ||
                   XSpeed &lt; 0 &amp;&amp; place_meeting(x - 6, y, par_collision_solid)      ||
                   XSpeed &gt; 0 &amp;&amp; place_meeting(x + 6, y, par_collision_obstacles)  ||
                   XSpeed &lt; 0 &amp;&amp; place_meeting(x - 6, y, par_collision_obstacles)  {
                   
                   // Unstick from the wall:
                      x -= XSpeed;
                      
                   // Bounce and lose strength:
                      XSpeed = -XSpeed * 0.9;
                }
             
          }
       
       // Apply Y Force:
          y += YSpeed + sin(AngleToChar)*IsAttracted;
          
          if(InMotion == true){
          
             // Set Mask:
                mask_index = spr_ring_mask_hor;
                          
             // Unstuck and bounce when we collide with walls:
                if(YSpeed &gt; 0 &amp;&amp; place_meeting(x, y + 6, par_collision_solid))     ||
                   YSpeed &lt; 0 &amp;&amp; place_meeting(x, y - 6, par_collision_solid)      ||
                   YSpeed &gt; 0 &amp;&amp; place_meeting(x, y + 6, par_collision_obstacles)  ||
                   YSpeed &lt; 0 &amp;&amp; place_meeting(x, y - 6, par_collision_obstacles)  {
                   
                   // Unstick from the wall:
                      y -= YSpeed;
                      
                   // Bounce and lose strength:
                      YSpeed = -YSpeed * 0.9;
                }
                 
             // Apply Gravity:
                YSpeed += GravityForce;
              
             // Destroy if the timer runs out:
                if(RingTimer &gt; 0) RingTimer -= 1;
                if(RingTimer &lt; 1) instance_destroy();   
             
          }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy a ring if spilled, and outside the view.
    if(InMotion &amp;&amp; (x &lt; view_xview || x &gt; view_xview+view_wview)){
       instance_destroy();
    }     
     
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Rings.

    // Draw them Flashing:
       if(InMotion &amp;&amp; RingTimer &lt; 90){
          if((RingTimer div 4) mod 2) draw_sprite(spr_ring, image_index, x, y);
       }else{
          // Draw them normally:       
             draw_sprite(spr_ring, image_index, x, y);
       }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
