<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_editor_noicon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setup Variables:
usable              = false; 
options_id          = 1;     //The current selected Option.
options_available   = 9;    //How many options are available?
overlay_alpha       = 0;     //Used to make the Screen darker.
options_description = "";    //To draw a Description.
button_mapping      = false; //If we Choose to map the Gamepad Options!

//Enable:
alarm[0] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Create Title Menu</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Exit if we want to map Buttons:
if(button_mapping == true) exit;

//Disable Enter:
keyboard_key_release(vk_enter);

//Create Menu:
title_menu = instance_create(0,0,obj_menu_title)
 title_menu.options_id = 2;

//Stop Options theme:
with(obj_music_box){
     event_user(1);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>usable = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Change / Set Option</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(usable){

//Overlay Alpha:
if(overlay_alpha != 0.6){
   overlay_alpha += 0.05;
};

//Scroll Up:
if(keyboard_check_pressed(vk_up)){
   if(options_id != 1){
      options_id -= 1;
   }else{
      options_id = options_available;
  };
  sound_play(snd_sfx_switch);
};

//Scroll Down:
if(keyboard_check_pressed(vk_down)){
   if(options_id != options_available){
      options_id += 1;
   }else{
      options_id = 1;
  };
  sound_play(snd_sfx_switch);  
};

//Change Options:

/// --- BGM:
if(options_id == 1){
   if(keyboard_check(vk_left) &amp;&amp; global.bgm_volume != 0){
      global.bgm_volume -= .01;
   }else if(keyboard_check(vk_right) &amp;&amp; global.bgm_volume != 1){
      global.bgm_volume += .01;
   }
};

/// --- SFX:
if(options_id == 2){
   if(keyboard_check(vk_left) &amp;&amp; global.sfx_volume != 0){
      global.sfx_volume -= .01;
   }else if(keyboard_check(vk_right) &amp;&amp; global.sfx_volume != 1){
      global.sfx_volume += .01;
   }
};


/// --- Angle Mode:
if(options_id == 3){
   if(keyboard_check(vk_left) &amp;&amp; global.angle_mode != 1){
      global.angle_mode = 1;
   }else if(keyboard_check(vk_right) &amp;&amp; global.angle_mode != 2){
      global.angle_mode = 2;
   }
};

/// --- Screen Resolution:
if(options_id == 4){
   if(keyboard_check_pressed(vk_left) &amp;&amp; global.win_resolution != 1){
      global.win_resolution -= 1;
   }else if(keyboard_check_pressed(vk_right) &amp;&amp; global.win_resolution != 4){
      global.win_resolution += 1;
   }
};

/// --- Peelout:
if(options_id == 5){
   if(keyboard_check(vk_left) &amp;&amp; global.use_peelout != 0){
      global.use_peelout = 0;
   }else if(keyboard_check(vk_right) &amp;&amp; global.use_peelout != 1){
      global.use_peelout = 1;
   }
};

/// --- Homing:
if(options_id == 6){
   if(keyboard_check(vk_left) &amp;&amp; global.use_homing != 0){
      global.use_homing = 0;
   }else if(keyboard_check(vk_right) &amp;&amp; global.use_homing != 1){
      global.use_homing = 1;
   }
};

/// --- Lightdash:
if(options_id == 7){
   if(keyboard_check(vk_left) &amp;&amp; global.use_light != 0){
      global.use_light = 0;
   }else if(keyboard_check(vk_right) &amp;&amp; global.use_light != 1){
      global.use_light = 1;
   }
};

/// --- Gamepad:
if(options_id == 8){
   if(keyboard_check_pressed(vk_enter)){
      button_mapping = true;
      instance_create(0,0,obj_options_gamepad);
   };
};

/// --- Exit:
if(options_id == 9){
   if(keyboard_check_pressed(vk_enter)){
      instance_destroy();
   };
};

};

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw Options</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Dark Overlay:
draw_sprite_ext(spr_dot,-1,0,0,424,240,0,c_black,overlay_alpha)

//Setup Font:
draw_set_font(global.fnt_abc_main);
draw_set_color(c_white);

//Draw "Options" on the top of the screen.
draw_set_halign(fa_center);
{
draw_text(160,4,"* OPTIONS MENU *")
};
draw_set_halign(-1)

//Draw Description if available:
if(options_description != ""){
   draw_set_halign(fa_center);
   draw_text(160,180,options_description);
   draw_set_halign(-1);
};

/* --- Draw Options --- */

//--- BGM Volume:
if(options_id = 1){
options_description = "CHANGE THE BGM VOLUME";
draw_set_color(c_yellow);
};
draw_text(10,20,"*BGM VOLUME*");
draw_set_color(c_white)
;

// Volume:
draw_text(140,20,string( max(floor(global.bgm_volume*100),min(0))) + "%");

// ----------------------------------------------

//--- SFX Volume:
if(options_id = 2){
options_description = "CHANGE THE SFX VOLUME";
draw_set_color(c_yellow);
};
draw_text(10,36,"*SFX VOLUME*");
draw_set_color(c_white)
;

// Volume:
draw_text(140,36,string( max(floor(global.sfx_volume*100),min(0))) + "%");

// ----------------------------------------------

// --- Angle Mode:
if(options_id = 3){
options_description = "SWITCH THE ANGLE MODE#TO CLASSIC OR 360";
draw_set_color(c_yellow);
};
draw_text(10,52,"*ANGLE MODE*");
draw_set_color(c_white);

// Smooth/Classic:
if(global.angle_mode == 1){
draw_text(140,52,"SMOOTH - 360");
}else{
draw_text(140,52,"CLASSIC - 8");
};

// ----------------------------------------------

// --- Screen Resolution:
if(options_id = 4){
options_description = "CHANGE THE SCREEN RESOLUTION!#*WORKS ALSO BY PRESSING F4";
draw_set_color(c_yellow);
};
draw_text(10,68,"*SCREEN RES.*");
draw_set_color(c_white);

// True/False:
switch(global.win_resolution){
  case 1:{draw_text(140,68,"320x224 - DEFAULT"); break;};
  case 2:{draw_text(140,68,"640x448 - DOUBLE"); break;};
  case 3:{draw_text(140,68,"960x672 - MAX"); break;};
  case 4:{draw_text(140,68,"...x... - FULLSCREEN"); break;};      
};

// ----------------------------------------------

// --- Peel Out:
if(options_id = 5){
options_description = "ENABLE THE SONIC CD PEELOUT";
draw_set_color(c_yellow);
};
draw_text(10,84,"*PEELOUT*");
draw_set_color(c_white);

// Enabled/Disabled:
if(global.use_peelout == 1){
draw_text(140,84,"ENABLED");
}else{
draw_text(140,84,"DISABLED");
};

// ----------------------------------------------

// --- Homing Attack:
if(options_id = 6){
options_description = "ENABLE THE HOMING ATTACK#- WORKS ONLY ON ENEMIES -";
draw_set_color(c_yellow);
};
draw_text(10,100,"*HOMING ATTACK*");
draw_set_color(c_white);

// Enabled/Disabled:
if(global.use_homing == 1){
draw_text(140,100,"ENABLED");
}else{
draw_text(140,100,"DISABLED");
};

// ----------------------------------------------

// --- Lightdash :
if(options_id = 7){
options_description = "ENABLE TO USE THE LIGHTDASH!#- WORKS ONLY WITH LDASH RINGS -";
draw_set_color(c_yellow);
};
draw_text(10,116,"*LIGHTDASH*");
draw_set_color(c_white);

// Enabled/Disabled:
if(global.use_light == 1){
draw_text(140,116,"ENABLED");
}else{
draw_text(140,116,"DISABLED");
};

// ----------------------------------------------

// --- Gamepad :
if(options_id = 8){
options_description = "";
draw_set_color(c_yellow);
};
draw_text(10,132,"*GAMEPAD*");
draw_set_color(c_white);

// ----------------------------------------------

// --- EXIT :
if(options_id = 9){
options_description = "";
draw_set_color(c_yellow);
};
draw_text(10,200,"EXIT");
draw_set_color(c_white);

// ----------------------------------------------

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
