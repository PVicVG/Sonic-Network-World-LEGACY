<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_editor_noicon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>99999999</depth>
  <persistent>0</persistent>
  <parentName>obj_control</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Set Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw = true;
mtn_back = bg_ghz_parallax_mountain_1;
sea_back = bg_ghz_parallax_water_1;
cl_speed = 0;

alarm[0] = 3.75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Update BG</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch ( sea_back )
{
    case bg_ghz_parallax_water_1:
    mtn_back = bg_ghz_parallax_mountain_2;
    sea_back = bg_ghz_parallax_water_2;
    break;
    
    case bg_ghz_parallax_water_2:
    mtn_back = bg_ghz_parallax_mountain_3;
    sea_back = bg_ghz_parallax_water_3;
    break;
    
    case bg_ghz_parallax_water_3:
    mtn_back = bg_ghz_parallax_mountain_4;
    sea_back = bg_ghz_parallax_water_4;
    break;
    
    case bg_ghz_parallax_water_4:
    mtn_back = bg_ghz_parallax_mountain_1;
    sea_back = bg_ghz_parallax_water_1;
    break;
}

alarm[0] = 3.75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( draw == true ) cl_speed -= 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    This object draws out each individual part of Green Hill Zone according to depth and fragment. The sea is separated
    to show how far apart it is from the mainland (the land Sonic runs through). The mountains have the farthest depth
    since it marks the separation point between the mainland and the mountains themselves. The clouds follow the view,
    however they have a speed of their own. There are three sections; the first section holds the largest clouds,
    therefore they are the ones moving the fastest. Then, it goes down to the next two smallest cloud groups, which
    both have different scrolling speeds. Finally, you have the animation; the sea and mountains each have an animation
    of their own. The sea sparkles while the mountains hold waterfalls. They are given a specific timer in which to
    change their animations. The current frame is stored in two variables: mtn_back and sea_back. The object's x variable
    is set to view_xview[view_current] to avoid overdrawing.

    A special script is used to make all of this happen, and that is scr_draw_background_tiled_area. Basically, this is the
    advanced version of draw_background_tiled and draw_background_tiled_ext in a sense where you choose if the background
    is drawn either horizontally or vertically. The arguments are as follows:

    //---------&gt;&gt; draw_background_tiled_area( back, left, top, x, y, width, height) &lt;&lt;---------//

    The width argument tells the function to draw it out horizontally, whereas the height argument tells it to draw
    vertically. The left should sometimes be set to 0; glitchy things happen when the left goes too far. As for the top,
    what I did here is put it into one variable - so that it doesn't change - then used the height variable to tell
    the function how long the cropped background is from the top. For example, I want to draw the first set of clouds.
    The top would be set to 0, and the height would be set the 32 pixels long.

    View_xview and view_yview[view_current] are critical in these functions because they help implement parallax, or depth of the
    background by sections. If you multiply the x_view by 0, the frame stays in place, whereas if you multiply it by
    1, the frame moves with you, since it moves along the left-top section of the view boundary itself. Therefore, the
    factor (number multiplied to make it move) should be greater than 0 and less than 1 (i.e. 0.5).
*/

    //Draw the Colored Background (Doing it this way saves up more memory than drawing the color in the room, which fills the entire room.)
    draw_set_color( make_color_rgb(32, 0, 160) );
    draw_rectangle(view_xview[view_current], view_yview[view_current], view_xview[view_current]+view_wview, view_yview[view_current] + view_hview, false);
    draw_set_color(c_white);

    //Draw the Ocean (The heights are all the same, so a for-loop is highly recommended.)
    for (a = 0; a &lt; 7; a += 1)
    {
        ax = 0.875 - (a * 0.05);
        ay = 0.125 + (a * 0.05);
        scr_draw_background_tiled_area(sea_back, 0, a * 16, view_xview[view_current] * ax, view_yview[view_current] + (a * 16) + 144, view_xview[view_current] * ay + view_wview, 16);
    }

    //Draw the Clouds (A speed variable is used to help it move separately from the others.)
    scr_draw_background_tiled_area(bg_ghz_parallax_clouds, 0,  0, view_xview[view_current] + (cl_speed * 0.75), view_yview[view_current] + 0 , view_wview - (cl_speed * 0.75), 32);
    scr_draw_background_tiled_area(bg_ghz_parallax_clouds, 0, 32, view_xview[view_current] + (cl_speed * 0.50), view_yview[view_current] + 32, view_wview - (cl_speed * 0.50), 16);
    scr_draw_background_tiled_area(bg_ghz_parallax_clouds, 0, 48, view_xview[view_current] + (cl_speed * 0.25), view_yview[view_current] + 48, view_wview - (cl_speed * 0.25), 16);

    //Draw the Mountains (This is the most basic one; this outlines what you're basically supposed to do.)
    scr_draw_background_tiled_area(mtn_back, 0,  0, view_xview[view_current] * 0.875, view_yview[view_current] + 64 , view_xview[view_current] * 0.125 + view_wview, 50);
    scr_draw_background_tiled_area(mtn_back, 0, 50, view_xview[view_current] * 0.850, view_yview[view_current] + 114, view_xview[view_current] * 0.150 + view_wview, 50);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
