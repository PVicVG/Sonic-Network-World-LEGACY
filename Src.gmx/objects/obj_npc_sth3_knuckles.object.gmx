<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_npc_sth3_knuckles</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>par_boss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    Knuckles_HP            =  8;     // How many hits it takes to defeat Knuckles.
    Knuckles_InvTime       = 60;     // How long knuckles can't be hit.
    Knuckles_State         = 'Idle'; // State of Knuckles (Idle &gt; Punch &gt; Spindash &gt; Jump &gt; Glide &gt; Hurt)
    Knuckles_SpindashTimer =  6;     // How long the spindash lasts.
    Knuckles_GlideState    =  0;     // Used for Knuckles Jump/Glide.
    Knuckles_GlideAccel    =  0;     // Accel when Gliding.
    Knuckles_Direction     = -1;     // Direction Knuckles is facing.
    Knuckles_Ground        = -1;     // Is knuckles on the ground?
    Knuckles_XSpeed        =  0;     // Horizontal speed of knuckles.
    Knuckles_YSpeed        =  0;     // Vertical speed of knuckles.
    alarm[0]               = 200;
    _Pitch                 =  0;
    image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Random Attack.

    var rAttack;
    rAttack = choose(1, 2, 3, 2, 3, 1, 1, 3, 2, 1);

//  Punch:            
    if(rAttack = 1){    
       Knuckles_State = 'Punch';
       exit;
    }
    else      
//  Spindash:
    if(rAttack = 2){
       image_index    = 12;    
       Knuckles_State = 'Spindash';
       exit;
    }    
    else
//  Punch &amp; Spindash:
    if(rAttack = 3){
       Knuckles_State = 'Spindash';
       exit;
    }                
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// States.
 
 // Idle:
    if(Knuckles_State = 'Idle'){
       if(image_index &gt; 6){
          image_index = 0;
       }
       image_index += 0.15;
       if(alarm[0] = -1){
          alarm[0] = choose(120, 60, 60, 120);
       }
    }
 
 // Punch:
    if(Knuckles_State = 'Punch'){
       if(image_index &gt;= 12){
          Knuckles_State = 'Idle';       
       }
       image_index += 0.15;
    }
    
 // Spindash:
    if(Knuckles_State = 'Spindash'){
       if(image_index &gt; 19){ 
          PlaySound(snd_character_spindash_charge, global.SFXVolume, 1+_Pitch, 1);
          if(_Pitch &lt; 1){
             _Pitch+=0.10;
          } 
          image_index = 14;
          Knuckles_SpindashTimer--;
       }
       if(Knuckles_SpindashTimer == 0){
          Knuckles_SpindashTimer = 6;         
          Knuckles_State         = 'Roll';
          Knuckles_XSpeed        = Knuckles_Direction*6;
          _Pitch                 = 0;
          image_index            = 20;
          PlaySound(snd_character_spindash_release, global.SFXVolume, 1, 1);           
       }       
       if(image_index &lt; 14){
          image_index += 0.15;
       }else{
          image_index += 0.50;
       }
    }
    
 // Roll:
    if(Knuckles_State = 'Roll'){
       if(image_index &lt; 20 || image_index &gt; 27){
          image_index = 20;
       }
       image_index += 0.50;
    }
 
 // Glide (Jump)
    if(Knuckles_State = 'Glide'){
       if(Knuckles_GlideState &lt; 1){
          Knuckles_GlideState += 0.05;
          if(Knuckles_GlideState == 0.25){
             image_index = 13;
          }else if(Knuckles_GlideState == 0.75){
                   image_index = 12;
          }else if(Knuckles_GlideState &gt;= 0.95){
                   PlaySound(snd_character_jump, global.SFXVolume, 1, 1);
                   Knuckles_Ground = false;
                   Knuckles_YSpeed = -6;
          }
       }else{
         if(Knuckles_GlideState == 1 &amp;&amp; Knuckles_YSpeed &lt; 0){
            if(image_index &lt; 20 || image_index &gt; 27){
               image_index = 20;
            }
            image_index += 0.50;            
         }else{
            Knuckles_GlideState  = 2;
            image_index = 29;
         }
         if(Knuckles_GlideState = 2){
            Knuckles_GlideAccel += 0.015625;
            Knuckles_XSpeed      = Knuckles_Direction*4+Knuckles_GlideAccel;
         }
         if(Knuckles_GlideState = 2 &amp;&amp; ((Knuckles_XSpeed &lt; 0 &amp;&amp; x &lt; view_xview+sprite_get_width(sprite_index)*2) || (Knuckles_XSpeed &gt; 0 &amp;&amp; x &gt; view_xview+view_wview-sprite_get_width(sprite_index)*2))){
            Knuckles_State      = 'Drop';                
            Knuckles_XSpeed     = Knuckles_XSpeed*0.25;  
            Knuckles_GlideState = 0;
            Knuckles_GlideTimer = 60;
         }
       }
    }
 
 // Drop:
    if(Knuckles_State = 'Drop'){
       if(Knuckles_Ground != 1){
          if(image_index != 31){
             image_index += 0.10;
          }
       }else{
         if(image_index &gt; 15){
            image_index = 12;
            Knuckles_XSpeed = 0;
            PlaySound(snd_character_land, global.SFXVolume, 1, 1);
         }
         if(image_index &lt; 14){
            image_index += 0.15;
         }else{
            Knuckles_State  = 'Idle';
         }
       }
    }
   
 // Hurt.
    if(Knuckles_State = 'Hurt'){
       if(Knuckles_HP != 0){
          if(image_index != 28){
             image_index         = 28;       
             Knuckles_Ground     = false;    
             Knuckles_GlideState = 0;                 
             Knuckles_XSpeed     = -Knuckles_Direction*2;
             Knuckles_YSpeed     = -4;                      
          }
       }else if(Knuckles_HP &lt; 1){
          if(image_index &lt; 32){
             image_index         = 32;       
             Knuckles_Ground     = false;    
             Knuckles_GlideState = 0;                 
             Knuckles_XSpeed     = -Knuckles_Direction*2;
             Knuckles_YSpeed     = -4;  
             if(CheckSound(bgm_knuckles_fight) == true){
                StopSound(bgm_knuckles_fight);
             }
          }        
       }
    }
   
    if(Knuckles_InvTime &lt; 60){
       Knuckles_InvTime--
    }
    if(Knuckles_InvTime &lt;= 0){
       Knuckles_InvTime = 60;
    }
    
 // Switch Direction:
    if(Knuckles_State == 'Idle'){
       if(par_character.x &gt; x){
          Knuckles_Direction = 1;
       }
       if(par_character.x &lt; x){
          Knuckles_Direction = -1;
       }       
    }   
    
 // Glide Accel &amp; Timer:
    if(Knuckles_State != 'Glide'){
       Knuckles_GlideAccel = 0;
       Knuckles_GlideTimer = 60;
    }    
    
 // Fix Alarm:
    if(Knuckles_State != 'Idle'){
       if(alarm[0] != -1){
          alarm[0]  = -1;
       }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision &amp; Horizontal &amp; Vertical Movement.

 // Collision:
    if(place_meeting(x, y + Knuckles_YSpeed, par_collision_solid)){ 
       while(!place_meeting(x, y + sign(Knuckles_YSpeed), par_collision_solid)){ 
             y += sign(Knuckles_YSpeed);
       } 
       Knuckles_YSpeed = 0;       
       Knuckles_Ground = 1;
    // When hit:
       if(Knuckles_State == 'Hurt' &amp;&amp; Knuckles_HP != 0){
          Knuckles_InvTime = 59;
          Knuckles_XSpeed  = 0;         
          Knuckles_State   = 'Glide';
       }else if(Knuckles_State == 'Hurt' &amp;&amp; Knuckles_HP = 0){
                Knuckles_XSpeed = 0;   
                Knuckles_YSpeed = 0;      
                if(floor(image_index) != 34){
                   image_index += 0.15;
                }else{
                   image_index = 34;
                }
       }
    }else{
     // Gravity:
       if(Knuckles_GlideState != 2){
          Knuckles_YSpeed += 0.21875 
       }else{
          Knuckles_YSpeed  = 0;
       }
       Knuckles_Ground = 0;
    }
    if(Knuckles_GlideState != 2){    
       y += Knuckles_YSpeed; 
    }        
    
 // Hit Borders:
    if(Knuckles_XSpeed &lt; 0 &amp;&amp; x &lt; view_xview+sprite_get_width(sprite_index)/2){
       if(Knuckles_State = 'Roll'){
          Knuckles_State     = 'Idle';
          Knuckles_Direction = -Knuckles_Direction;
          Knuckles_XSpeed    = 0;
       }
       if(Knuckles_GlideState == 2){
          Knuckles_State      = 'Drop';
          Knuckles_XSpeed     = 0;
          Knuckles_Direction = -Knuckles_Direction;
          Knuckles_GlideState = 0;     
          Knuckles_GlideTimer = 0;               
       }       
       x = view_xview+sprite_get_width(sprite_index)/2
       
    }    
    if(Knuckles_XSpeed &gt; 0 &amp;&amp; x &gt; view_xview+view_wview-sprite_get_width(sprite_index)/2){
       if(Knuckles_State = 'Roll'){
          Knuckles_State     = 'Idle';
          Knuckles_Direction = -Knuckles_Direction;
          Knuckles_XSpeed    = 0;          
       }
       if(Knuckles_GlideState == 2){
          Knuckles_State      = 'Drop';
          Knuckles_XSpeed     = 0;
          Knuckles_Direction  = -Knuckles_Direction;
          Knuckles_GlideState = 0;          
          Knuckles_GlideTimer = 0;
       }           
       x = view_xview+view_wview-sprite_get_width(sprite_index)/2;
    }   
     
 // Update positions:   
    x += Knuckles_XSpeed;
    
    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera lock.
 
    if(Knuckles_HP != 0){
       if(rectangle_in_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0])){
          with(obj_camera){
               Cam_Subject    = instance_nearest(x, y, obj_boss_camera);
               Cam_LeftLimit  = Cam_Subject.x-view_wview/2;
               Cam_RightLimit = Cam_Subject.x+view_wview/2;
          }
    
          // Loop Boss Theme.
             if(CheckSound(bgm_knuckles_fight) == false){
                LoopSound(bgm_knuckles_fight, global.SFXVolume, 1)
             }                 
       }
    }else{
          with(obj_camera){
               Cam_Subject    = par_character;
               Cam_LeftLimit  = 0;
               Cam_RightLimit = room_width;
          }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Knuckles.

    if(Knuckles_InvTime != 60){
       if((global.ObjectTime div 60) mod 3){
          draw_sprite_ext(sprite_index, image_index, floor(x), floor(y), Knuckles_Direction, 1, 0, c_white, 1)
       }
    }else{
          draw_sprite_ext(sprite_index, image_index, floor(x), floor(y), Knuckles_Direction, 1, 0, c_white, 1)
          if(Knuckles_State = 'Spindash' &amp;&amp; (image_index &gt;= 14)){
             draw_sprite_ext(spr_spindash_dust, current_time div 40, floor(x-Knuckles_Direction*7), floor(y), Knuckles_Direction, 1, 0, c_white, 1);   
          }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
