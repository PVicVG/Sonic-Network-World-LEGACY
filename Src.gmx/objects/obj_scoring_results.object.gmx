<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_results_passed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999995</depth>
  <persistent>0</persistent>
  <parentName>par_controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

 // Play Scoring theme.
    PlaySound(obj_audio_manager.Jingle_ActClear, global.BGMVolume, 1, 1)
  
 // Bonuses:
    BonusRings = (global.Rings * 100);
    BonusTotal = (global.Score);

    Seconds = floor(global.GameTime/1000);
    
    if(Seconds &lt;= 29){
        BonusTime   = 50000;
    }
    else if(Seconds &gt; 29 &amp;&amp; Seconds &lt;= 44){
        BonusTime   = 10000;
    }
    else if(Seconds &gt;= 45 &amp;&amp; Seconds &lt;= 59){
        BonusTime   = 5000;
        }
    else if(Seconds &gt;= 60 &amp;&amp; Seconds &lt;= 89){
        BonusTime   = 4000;
        }
    else if(Seconds &gt;= 90 &amp;&amp; Seconds &lt;= 119){
        BonusTime   = 3000;
        }
    else if(Seconds &gt;= 120 &amp;&amp; Seconds &lt;= 179){
        BonusTime   = 2000;
        }
    else if(Seconds &gt;= 180 &amp;&amp; Seconds &lt;= 239){
        BonusTime   = 1000;
        }
    else if(Seconds &gt;= 240 &amp;&amp; Seconds &lt;= 299){
        BonusTime   = 500;
        }
    else if(Seconds &gt;= 300){
        BonusTime   = 0;
        }
            
    ////

 // Reset Variables.
    global.CheckpointX = -1;
    global.CheckpointY = -1;
    
 // Allow counting:
    CanDo      = 0; 
    CanCount   = 0;
    CountSound = 1;
    
 // Skip:
    CanSkip = 0; 
 
 // Positions / Going out:
    GoingOut      =    0;
    GoOff         =  320;
    GoOff_2       = -320;
    
 // Text Positions:
    ResultGFX_Position[0] = -320;
    ResultGFX_Position[1] =  320;    
    ResultGFX_Position[2] =  350;
    ResultGFX_Position[3] =  380;
    ResultGFX_Position[4] =  410;
    ResultGFX_Position_Completed = false;
                
 // Disappear (For Act 2)
    Act2Disappear = false;

 // Misc.
    SpecialFlag = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy.
    obj_camera.Cam_RightLimit = room_width; 
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End it.

    if(GoingOut = 0){
       if(GoOff_2 &lt; 0){
          GoOff_2 += 20;
          alarm[5] = 1;
       }
    }else{
       if(SpecialFlag == false){
          if(instance_exists(obj_fade_next) == false){
             instance_create(x, y, obj_fade_next);
          }
       }else{
          if(instance_exists(par_character)){
             with(par_character){ 
                  GoalState   = 2;
                  LockControl = 0;
             }
             global.GameTime = 0;
             global.DoTime   = 1;
          }
          Act2Disappear = true;          
          global.ZoneAct++          
          TCard = instance_create(0, 0, obj_title_card_controller)
          TCard.SpecialFlag        = true;          
       }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Going out.
    
    if(GoingOut = 0){
       if(GoOff &gt; 0){
          GoOff -= 20;
          alarm[4] = 1;
       }else{
          alarm[5] = 1;
       }
    }else{
     alarm[5] = 1; 
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop Counting.

    CanCount = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Counting sounds.
 
    if(CountSound = 1){
       CanSkip  = 1;
       PlaySound(snd_scoring_points, global.SFXVolume, 1, 0)
       alarm[2] = 5;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Time Bonus.

    if(BonusTime &gt; 0){
       BonusTime    -= 10;
       BonusTotal   += 10;
       global.Score += 10;
       alarm[1]      =  1;
    }else{
       BonusTime = 0;
       alarm[1]  = -1;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ring Bonus.
    
    if(BonusRings &gt; 0){
       BonusRings   -= 10;
       BonusTotal   += 10;
       global.Score += 10;
       alarm[0]      =  1;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Text Positions.
    
    if(GoingOut == 0){
       if(ResultGFX_Position[0] &lt; 0){
          ResultGFX_Position[0] += 10;
       }else{
          ResultGFX_Position[0] = 0;    
       }
       if(ResultGFX_Position[1] &gt; 0){
          ResultGFX_Position[1] -= 10;
       }else{
          ResultGFX_Position[1] = 0;    
       }    
       if(ResultGFX_Position[2] &gt; 0){
          ResultGFX_Position[2] -= 10;
       }else{
          ResultGFX_Position[2] = 0;    
       }    
       if(ResultGFX_Position[3] &gt; 0){
          ResultGFX_Position[3] -= 10;
       }else{
          ResultGFX_Position[3] = 0;    
       }    
       if(ResultGFX_Position[4] &gt; 0){
          ResultGFX_Position[4] -= 10;
       }else{
          ResultGFX_Position[4] = 0;              
       }       
       if(ResultGFX_Position[0] == 0 &amp;&amp; ResultGFX_Position[1] == 0 &amp;&amp; ResultGFX_Position[2] == 0 &amp;&amp;
          ResultGFX_Position[4] == 0 &amp;&amp; ResultGFX_Position_Completed == false){
          ResultGFX_Position_Completed = true;
          // Trigger Bonuses.
             alarm[0] = 280;
             if(BonusTime &gt; 0){
                alarm[1] = 280;
             }
             alarm[2] = 280;
             alarm[3] = 280;
             alarm[4] = 30;          
       }
    }else{
       if(SpecialFlag != 0 &amp;&amp; CanDo == 2){
       
       if(ResultGFX_Position[0] &gt; -320){
          ResultGFX_Position[0] -= 10;
       }else{
          ResultGFX_Position[0] = -320;    
       }
       if(ResultGFX_Position[1] &lt; 320){
          ResultGFX_Position[1] += 10;
       }else{
          ResultGFX_Position[1] = 320;    
       }    
       if(ResultGFX_Position[2] &lt; 320){
          if(ResultGFX_Position[0] &gt; -290){
             ResultGFX_Position[2] += 10;
          }
       }else{
          ResultGFX_Position[2] = 320;    
       }    
       if(ResultGFX_Position[3] &lt; 320){
          if(ResultGFX_Position[2] &gt; 30){
             ResultGFX_Position[3] += 10;
          }
       }else{
          ResultGFX_Position[3] = 320;    
       }    
       if(ResultGFX_Position[4] &lt; 320){
          if(ResultGFX_Position[3] &gt; 30){
             ResultGFX_Position[4] += 10;
          }      
       }else{
          ResultGFX_Position[4] = 320;    
       }
             
       }     
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finish counting bonuses.

    if(CanCount == 0){
       if(BonusRings == 0 &amp;&amp; BonusTime == 0){
          if(CanDo == 0){
             CountSound = 0;
             PlaySound(snd_scoring_result, global.SFXVolume, 1, 1)
             global.Rings = 0;
             CanDo = 1;
          }
          if(CanDo = 1 &amp;&amp; CheckSound(snd_scoring_result) == false){
             CanDo = 2;
          }
          if(GoingOut = 0 &amp;&amp; CanDo == 2){
             var JingleClear;
                 JingleClear = obj_audio_manager.Jingle_ActClear;
             if(CheckSound(JingleClear) == false){
                GoingOut = 1
                if(SpecialFlag == 0){
                   alarm[4] = 100;
                }else{
                   alarm[4] = 30;
                }
             }
          }
       }
    }

    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Skip counting.
   if(keyboard_check(global.Key_ACTION) &amp;&amp; CanSkip == 1){
      BonusTotal  += BonusTime + BonusRings;
      BonusTime    =  0;      
      BonusRings   =  0;      
      alarm[0]     = -1;
      alarm[1]     = -1;  
      alarm[3]     =  1; 
      CanSkip      =  0;
      global.Score = BonusTotal;      
   }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Disappear for Act 2.

    if(Act2Disappear = true){
    
       if(GoOff &gt; -320){
          GoOff -= 20
       }

       if(GoOff_2 &lt; 320){
          GoOff_2 += 20
       }
           
       if(alarm[6] == -1){
          alarm[6] = 120;
       }
       
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Results.

 // "Character" Got:
    draw_sprite(spr_results_name, par_character.CharacterID-1, view_xview+42+ResultGFX_Position[0], view_yview+56);

 // Through:
    draw_sprite(spr_results_through, 0, view_xview+99+ResultGFX_Position[1], view_yview+76);
    
 // Act Letter:
    draw_sprite(spr_title_card_acts, global.ZoneAct-1, view_xview+223+ResultGFX_Position[1], view_yview+59);
    
 // Time Bonus:
    draw_sprite(spr_results_time, 0, view_xview+64+ResultGFX_Position[2], view_yview+108);     

 // Ring Bonus:
    draw_sprite(spr_results_rings, 0, view_xview+64+ResultGFX_Position[3], view_yview+124);  

 // Total:
    draw_sprite(spr_results_total, 0, view_xview+84+ResultGFX_Position[4], view_yview+151);   
    
 // Draw Bonuses:
    draw_set_font(global.Font_HUD)
    draw_set_color(c_white)
    draw_set_halign(fa_right)
    
    scr_draw_number_zero(view_xview+247+8+ResultGFX_Position[2], view_yview+113,''+ string(BonusTime),  0);
    scr_draw_number_zero(view_xview+247+8+ResultGFX_Position[3], view_yview+129,''+ string(BonusRings), 0);
    scr_draw_number_zero(view_xview+247+8+ResultGFX_Position[4], view_yview+157,    string(BonusTotal), 0);
    
    draw_set_halign(-1)    
            
/*
 // Got through:
    draw_sprite(sprite_index, 0, view_xview+160+GoOff, view_yview+65);
    
 // Draw the Tally: 
    draw_sprite(spr_results_tally, 0, view_xview+55+GoOff, view_yview+140);
    
 // Act Letter:
    draw_sprite(spr_title_card_acts, global.ZoneAct-1, view_xview+230+GoOff, view_yview+68);
     
 // Draw Bonuses:
    draw_set_font(global.Font_HUD)
    draw_set_color(c_white)
    draw_set_halign(fa_left)
    
    scr_draw_number_zero(view_xview+230+GoOff_2, view_yview+188,''+ string(BonusTotal), 0);
    scr_draw_number_zero(view_xview+230+GoOff_2, view_yview+147,''+ string(BonusTime),  0);
    scr_draw_number_zero(view_xview+230+GoOff_2, view_yview+162,    string(BonusRings), 0);
    
    draw_set_halign(-1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
